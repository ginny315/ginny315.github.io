<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue3笔记（10）mock数据</title>
    <link href="/2022/07/14/vue3%E7%AC%94%E8%AE%B0%EF%BC%8810%EF%BC%89mock%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/07/14/vue3%E7%AC%94%E8%AE%B0%EF%BC%8810%EF%BC%89mock%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>mock数据的好处，万一遇到居家办公，本地就能完成开发。</p></blockquote><span id="more"></span><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h4 id="1-安装mockjs包"><a href="#1-安装mockjs包" class="headerlink" title="1. 安装mockjs包"></a>1. 安装mockjs包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install mockjs --save<br></code></pre></div></td></tr></table></figure><h4 id="2-修改-env-dev"><a href="#2-修改-env-dev" class="headerlink" title="2. 修改.env.dev"></a>2. 修改<code>.env.dev</code></h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">NODE_ENV = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_TITLE = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_INTERFACE_URL=<span class="hljs-string">&quot;/&quot;</span><br>VUE_APP_PROXYURL=<span class="hljs-string">&#x27;/&#x27;</span><br>VUE_APP_MOCK = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="3-新建mock文件夹"><a href="#3-新建mock文件夹" class="headerlink" title="3. 新建mock文件夹"></a>3. 新建mock文件夹</h4><p>3.1 <code>@/mock/api/</code>存放<code>***.json</code>文件，为API文件。<br>3.2 <code>@/mock/utils/</code>存放mock相关代码。<br><code>formatOptions.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">formatOptions</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; url, type, body &#125; = options;<br>  <span class="hljs-keyword">let</span> params = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;GET&quot;</span> || type === <span class="hljs-string">&quot;DELETE&quot;</span>) &#123;<br>    <span class="hljs-keyword">let</span> index = url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-keyword">let</span> paramsString = index &gt; -<span class="hljs-number">1</span> ? url.<span class="hljs-title function_">slice</span>(index + <span class="hljs-number">1</span>) : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (paramsString !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>      params = qs.<span class="hljs-title function_">parse</span>(paramsString);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    params = &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (body <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">FormData</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> body.<span class="hljs-title function_">entries</span>()) &#123;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        params = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(body);<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        params = qs.<span class="hljs-title function_">parse</span>(body);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (params !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(params).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    params = <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; url, type, params &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>mock.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mockjs&quot;</span>;<br><span class="hljs-keyword">import</span> formatOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./formatOptions&quot;</span>;<br><br><span class="hljs-title class_">Mock</span>.<span class="hljs-property">_mock</span> = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span>;<br><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url, method, resFunc</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_mock</span>(url);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>      <span class="hljs-string">&quot;Function Mock.mock require three params: url, method, resFunc!!!&quot;</span><br>    );<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">let</span> methods = [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>];<br>    <span class="hljs-keyword">if</span> (!methods.<span class="hljs-title function_">includes</span>(method.<span class="hljs-title function_">toLowerCase</span>())) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>        <span class="hljs-string">&quot;Function Mock.mock&#x27;s second param should be get, post, put, delete!!!&quot;</span><br>      );<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> resFunc !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Function Mock.mock&#x27;s third param should be a function!!!&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 将注册的 url 转成能匹配查询字符串的正则</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> url === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    url = url.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&quot;\\/&quot;</span>);<br>    url += <span class="hljs-string">&quot;(|\\?.*)$&quot;</span>;<br>    url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(url);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(url <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>      <span class="hljs-string">&quot;Function Mock.mock&#x27;s first param should be a string or regexp!!!&quot;</span><br>    );<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_mock</span>(url, method, <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-comment">// 格式化 options 对象</span><br>    options = <span class="hljs-title function_">formatOptions</span>(options);<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      res = <span class="hljs-title function_">resFunc</span>(options);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      res = err;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;);<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Mock</span>;<br></code></pre></div></td></tr></table></figure><p>3.3 <code>@/mock/index.ts</code>为开启mock的主要文件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/mock&quot;</span>;<br><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">setup</span>(&#123; <span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span> &#125;);<br><span class="hljs-keyword">import</span> getgenInfoJSON <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/mock/api/getgenInfo.json&quot;</span>;<br><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&quot;http://0.0.0.0:8080/api/v1/getgenInfo&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-function">(<span class="hljs-params">options</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> getgenInfoJSON;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="4-在AppMain-vue中按环境引入"><a href="#4-在AppMain-vue中按环境引入" class="headerlink" title="4. 在AppMain.vue中按环境引入"></a>4. 在AppMain.vue中按环境引入</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_MOCK</span>) &#123;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@/mock/index&quot;</span>) <br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="5-开启"><a href="#5-开启" class="headerlink" title="5. 开启"></a>5. 开启</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm run dev<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex备忘</title>
    <link href="/2022/07/11/flex%E5%A4%87%E5%BF%98/"/>
    <url>/2022/07/11/flex%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>维护老代码很麻烦的一点就是布局，改来改去还是决定全部改成flex，这篇记录下flex的一般用法，以备以后使用。</p></blockquote> <span id="more"></span><h4 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h4><p> display:flex 是一种布局方式。它即可以应用于容器中，也可以应用于行内元素。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。<br>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item）</p><h4 id="container属性"><a href="#container属性" class="headerlink" title="container属性"></a>container属性</h4><ol><li><p>flex-direction<br>定义主轴的方向（即项目的排列方向）<br>column-reverse：主轴为垂直方向，起点在下沿<br>column：主轴为垂直方向，起点在上沿<br>row（默认值）：主轴为水平方向，起点在左端<br>row-reverse：主轴为水平方向，起点在右端</p></li><li><p>flex-wrap<br>定义项目是否换行以及如何换行<br>nowrap：不换行<br>wrap：换行，第一行在上方<br>wrap-reverse：换行，第一行在下方</p></li><li><p>justify-content<br>定义项目在主轴上的对齐方式<br>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center：居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</p></li><li><p>align-items<br>定义项目在竖直方向上对齐方式<br>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</p></li><li><p>align-content<br>定义多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用<br>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p></li></ol><h4 id="item属性"><a href="#item属性" class="headerlink" title="item属性"></a>item属性</h4><ol><li><p>order<br>定义项目的排列顺序。数值越小，排列越靠前，默认为0</p></li><li><p>flex-grow<br>定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p>flex-shrink<br>定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p></li><li><p>flex-basis<br>定义了在分配多余空间之前，项目占据的主轴空间（main size）<br>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p></li><li><p>align-self<br>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></li></ol><h4 id="实战问题"><a href="#实战问题" class="headerlink" title="实战问题"></a>实战问题</h4><p>需要实现两个固定大小的盒子摆放，当页面宽度变小时，盒子自动垂直摆放。大概效果如下所示：<br><img src="/../img/flex-1.png" alt="两个盒子排放"></p><p>方案一：容器按照中间对齐，盒子分别与中轴线隔开一段距离。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方案二：容器按照左中右分隔。<br>如果直接使用space-between，则会出现中间是左右两边的2倍距，和设计稿差距较大，舍弃；<br>实验时发现一个神奇的space-evenly，可以实现左中右距离相等，但是查阅资料以后发现兼容性比较差（etc:iphone的SE上不支持），舍弃；<br>最后决定使用特殊方法模拟space-evenly。<br>出现问题：当垂直排列时，奇数盒子紧贴右侧，偶数盒子紧贴左侧。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>    &amp;<span class="hljs-selector-pseudo">:before</span>,<br>    &amp;<span class="hljs-selector-pseudo">:after</span> &#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-attribute">display</span>: block;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（9）scss配置</title>
    <link href="/2022/07/04/vue3%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89scss%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/04/vue3%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89scss%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有个需求是网页的整体配色需要和公司官网一致，在这里我使用scss写样式代码，需要全局引入颜色样式，以便在各个组件中使用。<br>这篇记录scss样式引入及使用。</p></blockquote><span id="more"></span><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><p>使用<code>vue-cli</code>创建项目时，可以选择使用scss，相关的配置会自动加入<code>package.json</code>，检查是否含有以下两项：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.32.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sass-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^12.0.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>在本项目中，<code>assets/scss/_variables.scss</code>文件中编写颜色样式。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">$text-yellow: yellow;<br></code></pre></div></td></tr></table></figure><p>方法一：单组件引入<br>可用的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br>@<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../../assets/scss/_variables.scss&quot;</span>;<br>span &#123;<br>  <span class="hljs-attr">color</span>: $text-yellow;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>如果报错”Undefined variable. root stylesheet”，说明文件没有引入成功；<br>如果报错”Can’t find stylesheet to import. root stylesheet”，说明引入的文件路径有问题；<br>不知道为什么下面这个写法会报错，显示无法找到文件。</p><p>方法二：整体引入<br>如果在每个组件中引入一次，稍微有点麻烦。按照我这里的设计，最好是整体引入，每个组件中都能使用。查阅一些资料后，发现可以在<code>vue.config.js</code>中这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@vue/cli-service&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">loaderOptions</span>: &#123;<br>      <span class="hljs-attr">sass</span>: &#123;<br>        <span class="hljs-attr">additionalData</span>: <span class="hljs-string">`@import &quot;@/assets/scss/_variables.scss&quot;;`</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>重启项目，更改成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（8）组件复用</title>
    <link href="/2022/05/16/vue3%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8/"/>
    <url>/2022/05/16/vue3%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一般来说，新增和编辑基本校验规则相同，我进行了组件复用。<br>这篇记录组件复用过程中遇到的问题</p></blockquote><span id="more"></span><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在更新任务时，我复用了新建任务的组件，通过url携带参数，填充表单。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">router.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/taskcreate&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">params</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(row) &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>新建任务拥有单独的侧栏，当处于更新任务状态时，若点击“新建任务”，url发生改变，但是组件状态没有变化。具体表现如下图所示：<br><img src="/../img/vue3-8-1.png" alt="更新任务"><br><img src="/../img/vue3-8-2.png" alt="新建任务"></p><p>方法一：使用watch观察参数变化</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  state.<span class="hljs-property">TaskForm</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(emyptForm));<br>  <span class="hljs-title function_">getDataServer</span>();<br>  <span class="hljs-title function_">watch</span>(route.<span class="hljs-property">query</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">getDataServer</span>();<br>  &#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>此时点击“新建任务”，url发生改变，但是watch并没有监测到参数变化，此方法不管用。</p><p>方法二：使用<code>onBeforeRouteUpdate</code>路由API</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">onBeforeRouteUpdate</span>(<span class="hljs-function">(<span class="hljs-params">to</span>) =&gt;</span> &#123;<br>  state.<span class="hljs-property">TaskForm</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(emyptForm));<br>  <span class="hljs-title function_">getDataServer</span>();<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>此时点击“新建任务”，url发生改变，<code>onBeforeRouteUpdate</code>执行，页面初始化成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（7）监听</title>
    <link href="/2022/05/10/vue3%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%E7%9B%91%E5%90%AC/"/>
    <url>/2022/05/10/vue3%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇记录vue组件的属性，以及computed, watch, watchEffect的使用区分。</p></blockquote><span id="more"></span><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h5 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h5><p>computed是计算属性，依赖其它属性值。<br>computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算。<br>接受一个 <code>getter</code> 函数，并根据 <code>getter</code> 的返回值返回一个不可变的响应式 ref 对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> plusOne = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> plusOne = <span class="hljs-title function_">computed</span>(&#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>    count.<span class="hljs-property">value</span> = val - <span class="hljs-number">1</span><br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><p>watch更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作。<br>需要侦听特定的数据源，并在单独的回调函数中执行副作用。<br>默认情况下，它是惰性的——即回调仅在侦听源发生变化时被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">watch</span>(num, <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;num.value&#125;</span>`</span>&#125;);<br><span class="hljs-title function_">watch</span>(<span class="hljs-function">() =&gt;</span> num.<span class="hljs-property">value</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">//有返回值的getter函数</span><br><span class="hljs-title function_">watch</span>([a, b], <span class="hljs-function">(<span class="hljs-params">[a, b], [prevA, prevB]</span>) =&gt;</span> &#123;&#125;); <span class="hljs-comment">//多个源</span><br></code></pre></div></td></tr></table></figure><h5 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h5><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">(<span class="hljs-params">onInvalidate</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">onInvalidate</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="watch-VS-watchEffect"><a href="#watch-VS-watchEffect" class="headerlink" title="watch VS watchEffect"></a>watch VS watchEffect</h5><p><code>watch</code> 与 <code>watchEffect</code> 在以下方面相同：</p><ol><li>手动停止侦听</li><li>清除副作用 (将 <code>onInvalidate</code> 作为第三个参数传递给回调)</li><li>刷新时机和调试。</li></ol><p>与 <code>watchEffect</code> 相比，<code>watch</code> 允许我们：</p><ol><li>惰性地执行副作用</li><li>更具体地说明应触发侦听器重新运行的状态</li><li>访问被侦听状态的先前值和当前值</li></ol><h3 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h3><p>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</p><p>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 (访问一个API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><a href="https://v3.cn.vuejs.org/api/computed-watch-api.html#computed">官方文档 Computed 与 watch</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（6）echarts图表使用</title>
    <link href="/2022/05/09/vue3%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89echarts%E5%9B%BE%E8%A1%A8%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/09/vue3%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89echarts%E5%9B%BE%E8%A1%A8%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务需求中需要实时（最近1分钟）展示数据变化。通过echarts图表注入，定时拉取数据，渲染图表，展示给用户。<br>这篇记录图表使用。</p></blockquote><span id="more"></span><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>vue中插件使用遵循以下原则：</p><ol><li>插件是一个对象，必须暴露一个 install 方法</li><li>插件本身是一个函数，则它将被视为 install 方法。</li></ol><p> install 方法将以应用实例作为第一个参数被调用。传给 use 的其他 options 参数将作为后续参数传入该安装方法。<br>当在同一个插件上多次调用此方法时，该插件将仅安装一次。</p><h3 id="echart使用逻辑"><a href="#echart使用逻辑" class="headerlink" title="echart使用逻辑"></a>echart使用逻辑</h3><ol><li>获取dom节点</li><li>初始化实例</li><li>在dom渲染后进行<code>setOption</code>设置<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> chartDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>)!;<br><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(chartDom);<br><span class="hljs-keyword">var</span> <span class="hljs-attr">option</span>: <span class="hljs-title class_">EChartsOption</span>;<br>option = &#123;...&#125;<br>option &amp;&amp; myChart.<span class="hljs-title function_">setOption</span>(option);<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="echarts插件"><a href="#echarts插件" class="headerlink" title="echarts插件"></a>echarts插件</h3><p>要将 echarts 作为插件在 vue 项目中使用，首先在 <code>index.jsx</code> 中进行 echart 插件的封装，使其符合 vue 组件的使用方式，在生命周期中创建、渲染、更新以及销毁。<br>后续所有传入参数必须遵循 <code>PropsType</code> 中的配置。<br><code>chartRef</code>用来指向渲染图表的 DOM 节点。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> theme <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/common/echart/style/theme.js&#x27;</span> <span class="hljs-comment">// 引入默认主题</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PropsType</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-title class_">String</span>, <span class="hljs-comment">// 图表唯一 id</span><br>  <span class="hljs-attr">className</span>: &#123; <span class="hljs-comment">// 图表类名</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;chart&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">width</span>: &#123; <span class="hljs-comment">// 图表宽度</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">require</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">height</span>: &#123; <span class="hljs-comment">// 图表高度</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">require</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">options</span>: &#123; <span class="hljs-comment">// 图表数据项</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;),<br>  &#125;<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Echarts&#x27;</span>,<br>  <span class="hljs-attr">props</span>: <span class="hljs-title class_">PropsType</span>,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, &#123; expose &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> chartRef = ref&lt;<span class="hljs-title class_">HTMLElement</span>&gt;()<br>    <span class="hljs-keyword">const</span> charts = &#123;<br>      <span class="hljs-attr">chart</span>: <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">initChart</span> = (<span class="hljs-params">data?: any, clearCaching = <span class="hljs-literal">false</span></span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (data || props.<span class="hljs-property">options</span>) &#123;<br>        charts.<span class="hljs-property">chart</span>.<span class="hljs-title function_">setOption</span>(data || props.<span class="hljs-property">options</span>, clearCaching)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      echarts.<span class="hljs-title function_">registerTheme</span>(<span class="hljs-string">&#x27;myTheme&#x27;</span>, theme) <span class="hljs-comment">// 覆盖默认主题</span><br>      charts.<span class="hljs-property">chart</span> = echarts.<span class="hljs-title function_">init</span>(chartRef.<span class="hljs-property">value</span>, <span class="hljs-string">&#x27;myTheme&#x27;</span>)<br>      <span class="hljs-title function_">initChart</span>()<br>    &#125;)<br><br>    <span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      charts.<span class="hljs-property">chart</span>.<span class="hljs-title function_">dispose</span>()<br>      charts.<span class="hljs-property">chart</span> = <span class="hljs-literal">null</span><br>    &#125;)<br><br>    <span class="hljs-title function_">watch</span>(<br>      <span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">options</span>,<br>      <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>        val &amp;&amp; <span class="hljs-title function_">initChart</span>(val)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    )<br><br>    <span class="hljs-title function_">expose</span>(&#123; <span class="hljs-comment">// 对外暴露接口</span><br>      chartRef,<br>      initChart<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; id, className, height, width &#125; = props<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;chartRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;id</span> <span class="hljs-attr">as</span> <span class="hljs-attr">string</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;className</span> <span class="hljs-attr">as</span> <span class="hljs-attr">string</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#x27;<span class="hljs-attr">height</span>&#x27;<span class="hljs-attr">:</span> <span class="hljs-attr">height</span> <span class="hljs-attr">as</span> <span class="hljs-attr">string</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> <span class="hljs-attr">width</span> <span class="hljs-attr">as</span> <span class="hljs-attr">string</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>在<code>componentInstall.ts</code>中定义一个有 install 方法的 component 组件对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">DefineComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Echart</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./echartCanvas/index&#x27;</span><br><br><span class="hljs-keyword">const</span> component = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>)<br><br>component.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">vue: DefineComponent</span>) &#123;<br>  vue.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;echart&#x27;</span>, <span class="hljs-title class_">Echart</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component<br></code></pre></div></td></tr></table></figure><p>在<code>main.ts</code>中添加可全局使用的ComponentEchart，后续<code>import Echart</code>时，使用的是封装好的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentEchart</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/componentInstall&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ComponentEchart</span>);<br></code></pre></div></td></tr></table></figure><h3 id="图表组件使用"><a href="#图表组件使用" class="headerlink" title="图表组件使用"></a>图表组件使用</h3><p>这里的例子是用仪表盘来表示温度，展示GPU运行的实际温度。temperature设置中shutdown(95)、slowdown(92)、max operation(85)，实时获取当前温度current。 </p><p>最终效果如下：<br><img src="/../img/vue6-1.png" alt="仪表盘图"></p><p>首先进行仪表盘的绘制配置，通过<code>draw.tsx</code>实现。<br>使用<code>watch</code>监听数据改变，手动触发更新（图表初始化）。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PropsType</span> = &#123;<br>  <span class="hljs-attr">cdata</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>    <span class="hljs-attr">require</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">props</span>: <span class="hljs-title class_">PropsType</span>,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">const</span> chartRef = <span class="hljs-title function_">ref</span>()<br>    <span class="hljs-keyword">let</span> options = &#123;&#125;<br><br>    <span class="hljs-title function_">watch</span>(<br>      <span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">cdata</span>,<br>      <span class="hljs-function">(<span class="hljs-params">val: any</span>) =&gt;</span> &#123;<br>        options = &#123;<br>          <span class="hljs-attr">series</span>: [<br>            &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gauge&#x27;</span>,<br>              ...<br>              <span class="hljs-attr">data</span>: val.<span class="hljs-property">current</span><br>            &#125;,<br>            &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gauge&#x27;</span>,<br>              ...<br>              <span class="hljs-attr">data</span>: val.<span class="hljs-property">maxoperation</span><br>            &#125;,<br>            &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gauge&#x27;</span>,<br>              ...<br>              <span class="hljs-attr">data</span>: val.<span class="hljs-property">slowdown</span><br>            &#125;<br>          ]<br>        &#125;<br>        <span class="hljs-comment">// 手动触发更新,通过初始化参数打入数据</span><br>        <span class="hljs-keyword">if</span> (chartRef.<span class="hljs-property">value</span>) &#123;<br>          chartRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">initChart</span>(options)<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    )<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> height = <span class="hljs-string">&quot;450px&quot;</span><br>      <span class="hljs-keyword">const</span> width = <span class="hljs-string">&quot;200px&quot;</span><br><br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">echart</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;chartRef&#125;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;height&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;width&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>在<code>index.jsx</code>中向仪表盘注入数据，初次使用时我直接这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Draw</span> &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> cdata = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-attr">current</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">24</span> &#125;],<br>      <span class="hljs-attr">maxoperation</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">85</span> &#125;],<br>      <span class="hljs-attr">slowdown</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">92</span> &#125;],<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Draw</span> <span class="hljs-attr">cdata</span>=<span class="hljs-string">&#123;cdata&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>出现了图表没有渲染的问题，仔细检查后，发现 echarts 没有实例化（可能是没有数据）。<br>修改<code>index.jsx</code>，设置一个<code>setData</code>方法，在 DOM 挂载时修改 cdata 中的数据，图表绘制成功。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> cdata = <span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">current</span>: [],<br>    <span class="hljs-attr">maxoperation</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">85</span> &#125;],<br>    <span class="hljs-attr">slowdown</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">92</span> &#125;],<br>  &#125;)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    cdata.<span class="hljs-property">current</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">24</span> &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setData</span>()<br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要注意的是代码更新会触发重新编译，但是浏览器没有主动刷新，需要手动刷新浏览器。</p><h3 id="定时拉取数据"><a href="#定时拉取数据" class="headerlink" title="定时拉取数据"></a>定时拉取数据</h3><p>在本项目中，需要实时（最近1分钟）展示数据变化，采取的方式是通过定时器<code>setInterval</code>实现，每隔60s发送一次请求。<br>组件挂载时开启定时器，组件卸载时及时清除定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> drawTiming = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">//请求数据改变</span><br>&#125;<br><span class="hljs-comment">// 定时函数，60秒刷新一次</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">drawTimingFn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">setData</span>();<br>  drawTiming.<span class="hljs-property">value</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setData</span>();<br>  &#125;, <span class="hljs-number">60000</span>);<br>&#125;<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">drawTimingFn</span>()<br>&#125;)<br><br><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">clearInterval</span>(drawTiming.<span class="hljs-property">value</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="UI渲染"><a href="#UI渲染" class="headerlink" title="UI渲染"></a>UI渲染</h3><ol><li>echarts由数据驱动，数据的改变驱动图表展现的改变。<br>动态数据的实现：获取数据，填入数据，echarts会找到两组数据之间的差异然后通过合适的动画去表现数据的变化。</li><li>vue由数据驱动，数据改变驱动视图变化。<br>vue在更新DOM时是异步执行的。当数据发生变化，vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新。</li></ol><p><img src="/../img/vue6-2.png" alt="event loop"></p><ol start="3"><li>vue有一种渲染优化策略<code>nextTick</code>，也是性能优化手段，基于JS执行机制实现。等待同一事件循环中的所有数据变化完成之后（一直修改相同数据，异步操作队列还会去重），再将队列中的事件拿来进行处理，进行DOM的更新，此时DOM只需要更新一次。<br>vue中我们改变数据时不会立即触发视图，如果需要实时获取到最新的DOM，可以手动调用 <code>nextTick</code>。</li><li>在以下情况下，会用到<code>nextTick</code>：<br>(1) 在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在<code>nextTick()</code>的回调函数中。<br>(2) 在vue生命周期中，如果在<code>created()</code>钩子进行DOM操作，也一定要放在<code>nextTick()</code>的回调函数中。因为在<code>created()</code>钩子函数中，页面的DOM还未渲染。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// DOM 更新了</span><br>&#125;)<br><br><span class="hljs-comment">// 作为一个 Promise 使用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>()<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// DOM 更新了</span><br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><a href="https://v3.cn.vuejs.org/guide/plugins.html#%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6">官方文档 插件</a><br><a href="https://echarts.apache.org/examples/zh/index.html">echarts官网示例</a><br><a href="https://github.com/vuejs/awesome-vue#components--libraries">各种插件</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（5）异步请求</title>
    <link href="/2022/05/07/vue3%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
    <url>/2022/05/07/vue3%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务需求中用户选择多项，每项都需要发一个请求给后端执行相应任务，并且请求返回需要反馈给用户。<br>方案一是发送多个请求，弹出多个返回值；方案二是发送多个请求，等待所有答复后给用户一个反馈。这篇记录项目中用到的异步请求。</p></blockquote><span id="more"></span><h3 id="multi-req-multi-res"><a href="#multi-req-multi-res" class="headerlink" title="multi req, multi res"></a>multi req, multi res</h3><p>方案一：发送多个请求，弹出多个返回值。<br>优点：可即时看到任务反馈。<br>缺点：很多弹窗用户体验不佳。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">params.<span class="hljs-property">host</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  params[<span class="hljs-string">&quot;servername&quot;</span>] = item;<br>  <span class="hljs-title function_">createServerUser</span>(params).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;create &#x27;</span>,res)<br>  <span class="hljs-keyword">const</span> &#123; code, msg &#125; = res.<span class="hljs-property">data</span><br>    <span class="hljs-keyword">if</span> (code == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title class_">ElNotification</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作成功&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;i&#x27;</span>, &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;color: teal&#x27;</span> &#125;, <span class="hljs-string">&#x27;创建服务器用户成功！&#x27;</span>),<br>      &#125;);<br>      <span class="hljs-title function_">getDataSU</span>();<br>      <span class="hljs-title function_">clearAll</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(msg);<br>    &#125;<br>    isCreating.<span class="hljs-property">value</span>  = <span class="hljs-literal">false</span>;<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;创建服务器用户失败...&#x27;</span>);<br>    isCreating.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  &#125;);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="multi-req-one-res"><a href="#multi-req-one-res" class="headerlink" title="multi req, one res"></a>multi req, one res</h3><p>方案二是发送多个请求，等待所有答复后给用户一个答复。<br>优点：不会出现多次连续弹窗。<br>缺点：如果任务失败或者执行时间较长，用户等待过程比较煎熬。<br>这里使用<code>Promise.all</code>这个API。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> reqArr = [];<br>params.<span class="hljs-property">host</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  params[<span class="hljs-string">&quot;servername&quot;</span>] = item;<br>  reqArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createServerUser</span>(params));<br>&#125;)<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(reqArr).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; code, msg &#125; = res[<span class="hljs-number">0</span>].<span class="hljs-property">data</span><br>    <span class="hljs-keyword">if</span> (code == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title class_">ElNotification</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作成功&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;i&#x27;</span>, &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;color: teal&#x27;</span> &#125;, <span class="hljs-string">&#x27;创建服务器用户成功！&#x27;</span>),<br>      &#125;);<br>      <span class="hljs-title function_">getDataSU</span>();<br>      <span class="hljs-title function_">clearAll</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(msg);<br>    &#125;<br>    isCreating.<span class="hljs-property">value</span>  = <span class="hljs-literal">false</span>;<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;创建服务器用户失败...&#x27;</span>);<br>    isCreating.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h3 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h3><ol><li><code>async/await</code>和<code>promise</code>关系？</li><li>如何避免回调地狱？</li><li>更直观的回调写法？</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（4）vuex</title>
    <link href="/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89vuex/"/>
    <url>/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89vuex/</url>
    
    <content type="html"><![CDATA[<blockquote><p>更复杂的通信可以使用vuex实现，以增加代码维护性。<br>这篇记录vuex的使用。</p></blockquote><span id="more"></span><h3 id="vuex简介"><a href="#vuex简介" class="headerlink" title="vuex简介"></a>vuex简介</h3><p><code>vuex</code>是一个专为Vue.js应用程序开发的状态管理模式。每一个vuex应用的核心就是store（仓库）。store 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。<br>（1）vsuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新；<br>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化；</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><code>store</code>文件夹下<code>index.ts</code>中。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;&#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>State &#x3D;&gt; 基本数据，定义了应用状态的数据结构，可以在这里设置默认的初始状态。<br>Getter &#x3D;&gt; 从基本数据派生的数据，允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br>Mutation &#x3D;&gt; 是唯一更改 store 中状态的方法，且必须是同步函数。<br>Action &#x3D;&gt; 像一个装饰器，包裹mutations，使之可以异步。用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。<br>Module &#x3D;&gt; 模块化Vuex，允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p><p><code>store/modules/</code>文件夹下<code>user.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserState</span> &#123;<br>  <span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">user_info</span>: <span class="hljs-title class_">IUserInfo</span>;<br>&#125;<br><span class="hljs-meta">@Module</span>(&#123; <span class="hljs-attr">dynamic</span>: <span class="hljs-literal">true</span>, store, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span> &#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">VuexModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserState</span> &#123;<br>  <span class="hljs-keyword">public</span> token = <span class="hljs-title function_">getToken</span>() || <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">public</span> user_info = <span class="hljs-title function_">getUserBag</span>() || &#123;&#125;;<br><br>  <span class="hljs-comment">// @Mutation 标注为mutation</span><br>  <span class="hljs-meta">@Mutation</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SET_TOKEN</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = token;<br>  &#125;<br>  <span class="hljs-meta">@Mutation</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SET_USERINFO</span>(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, id: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-comment">// 设置用户名</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user_info</span>[<span class="hljs-string">&quot;username&quot;</span>] = username;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user_info</span>[<span class="hljs-string">&quot;id&quot;</span>] = id;<br>  &#125;<br><br>    <span class="hljs-comment">// @Action 标注为action</span><br>  <span class="hljs-meta">@Action</span>(&#123; <span class="hljs-attr">rawError</span>: <span class="hljs-literal">true</span> &#125;)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title class_">Login</span>(<br>    <span class="hljs-attr">userInfo</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span> &#125;,<br>  ) &#123;<br>    <span class="hljs-comment">// 登录接口，拿到token</span><br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = userInfo;<br>    username = username.<span class="hljs-title function_">trim</span>();<br>    password = password.<span class="hljs-title function_">trim</span>();<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(&#123; username, password &#125;);<br>      <span class="hljs-keyword">if</span> (data &amp;&amp; data.<span class="hljs-property">code</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; token, user_id, username&#125; = data.<span class="hljs-property">data</span>;<br>        <span class="hljs-keyword">const</span> newUser = &#123;<br>          <span class="hljs-attr">username</span>: username,<br>          <span class="hljs-attr">id</span>: user_id,<br>        &#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_TOKEN</span>(token);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">SET_USERINFO</span>(username, user_id);<br>        <span class="hljs-title function_">setToken</span>(token, newUser);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> errMsg = (data &amp;&amp; data.<span class="hljs-property">msg</span>) || <span class="hljs-string">&quot;服务器升级中...&quot;</span><br>        <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(errMsg);<br>      &#125;<br>  &#125;<br><span class="hljs-comment">// getModule 得到一个类型安全的store，module必须提供name属性</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">UserModule</span> = <span class="hljs-title function_">getModule</span>(<span class="hljs-title class_">User</span>);<br></code></pre></div></td></tr></table></figure><h3 id="问题debug"><a href="#问题debug" class="headerlink" title="问题debug"></a>问题debug</h3><p>登录过程某一方法错误，被框架捕获。<br>解决方案：只需在注释中添加<code>rawError</code>选项即可，<code>@Action(&#123;rawError: true&#125;)</code>，这样console就会显示正常问题报错了。<br><img src="/img/vue3-4-1.png" alt="vue3登录过程错误"></p><h3 id="ajax请求数据"><a href="#ajax请求数据" class="headerlink" title="ajax请求数据"></a>ajax请求数据</h3><p>如果请求来的数据不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里；如果被其他地方复用，最好将请求放入 action 里，方便复用，并包装成 promise 返回。</p>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（3）通信 父子组件通信</title>
    <link href="/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>公司的项目需要实现针对组织架构选择部门—即树状展示部门，同时多选。这个功能在多个页面中使用到，所以抽成了组件，以实现复用。<br>父组件调用子组件时，需要获取子组件已经勾选的内容，我的设计是父组件通过props传递一个ref对象，子组件观察状态的变化，通过 $emit 事件告诉父组件。<br>这篇记录父子组件通信。</p></blockquote><span id="more"></span><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>所有的<code>prop</code>都使得其父子之间形成了一个单向下行绑定：父级<code>prop</code>的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致应用的数据流向难以理解。额外的，每次父级组件发生更新时，子组件中所有的<code>prop</code>都将会刷新为最新的值。<br>子组件想修改时，只能通过<code>$emit</code>派发一个自定义事件，父组件接收到后，由父组件修改。</p><h3 id="父子组件通信实现"><a href="#父子组件通信实现" class="headerlink" title="父子组件通信实现"></a>父子组件通信实现</h3><p>实现方案：父级向子级dept-tree传入状态sum（可以为sumbit事件中的状态改变）。自定义的<code>getDeptNodes</code>方法获取payload。<br>父组件调用代码如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dept-tree</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">getDeptNodes</span>=<span class="hljs-string">&quot;getDeptNodes&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:sum</span>=<span class="hljs-string">&quot;sumDept&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dept-tree</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">DeptTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Tree/dept.vue&quot;</span>;<br><span class="hljs-attr">components</span>: &#123;<br>  <span class="hljs-title class_">DeptTree</span><br>&#125;,<br><span class="hljs-attr">setup</span>: &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getDeptNodes</span> = (<span class="hljs-params">params</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;deptNodes=&#x27;</span>,params);<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    getDeptNodes<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>子组件模板渲染部门数据。<br>观察状态sum的变化，通过<code>emit</code>触发自定义的<code>getDeptNodes</code>方法，传入已选内容。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-tree</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;treeRef&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;deptTree&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">show-checkbox</span></span><br><span class="hljs-tag">    <span class="hljs-attr">default-expand-all</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">check-strictly</span>=<span class="hljs-string">true</span></span><br><span class="hljs-tag">    <span class="hljs-attr">node-key</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:props</span>=<span class="hljs-string">&quot;defaultProps&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Vue对定义了<code>type</code>的<code>prop</code>执行运行时验证。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br>  <span class="hljs-keyword">import</span> &#123; defineComponent, reactive, toRefs, onMounted, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br>  <span class="hljs-keyword">import</span> &#123; getDept&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/users&quot;</span>;<br>  <span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span>, <span class="hljs-title class_">ElTree</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br>  <span class="hljs-keyword">import</span> &#123; arrToTree &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;deptTree&quot;</span>,<br>    <span class="hljs-attr">props</span>: &#123;<br>      <span class="hljs-attr">sum</span>: &#123; <span class="hljs-comment">// 作为ref对象传入，可能有其他问题</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>        <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, &#123; emit &#125;</span>) &#123;<br>      <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>        <span class="hljs-attr">deptTree</span>:[]<br>      &#125;);<br><br>      <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">getDataDept</span>();<br>      &#125;);<br><br>      <span class="hljs-comment">// 部门数据</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">getDataDept</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-title function_">getDept</span>(&#123;&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123; data &#125; = res.<span class="hljs-property">data</span>;<br>          <span class="hljs-keyword">let</span> deptTreeArr = [];<br>          deptTreeArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">arrToTree</span>(data));<br>          state.<span class="hljs-property">deptTree</span> = deptTreeArr<br>        &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>          <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取部门数据错误！&#x27;</span>);<br>        &#125;)<br>      &#125;;<br>      <span class="hljs-keyword">const</span> treeRef = ref&lt;<span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ElTree</span>&gt;&gt;();<br>      <span class="hljs-keyword">const</span> defaultProps = &#123;<br>        <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;children&#x27;</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;label&#x27;</span>,<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> sum = props.<span class="hljs-property">sum</span>;<br>      <span class="hljs-title function_">watch</span>(sum,<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;props.sum=&#x27;</span>,sum)<br>        <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;getDeptNodes&#x27;</span>,&#123;<span class="hljs-string">&quot;deptNodes&quot;</span>:<span class="hljs-title function_">getCheckedNodes</span>()&#125;)<br>      &#125;);<br><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCheckedNodes</span> = (<span class="hljs-params"></span>) =&gt; &#123; <span class="hljs-comment">// 选中的部门</span><br>        <span class="hljs-keyword">return</span> treeRef.<span class="hljs-property">value</span>!.<span class="hljs-title function_">getCheckedNodes</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> &#123;<br>        treeRef,<br>        defaultProps,<br>        ...<span class="hljs-title function_">toRefs</span>(state),<br>      &#125;<br>    &#125;<br>  &#125;);<br>  &lt;/script&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（2）打包 &amp; 部署</title>
    <link href="/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%E6%89%93%E5%8C%85%20&amp;%20%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/04/29/vue3%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%E6%89%93%E5%8C%85%20&amp;%20%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务中分为测试环境和生产环境，对应API地址不同，我分别做了打包配置。<br>当前vue项目配置和之前的略有不同，记录一下打包上线配置。代码上传到服务器中，使用nginx代理。</p></blockquote><span id="more"></span><h3 id="按照环境模式区分"><a href="#按照环境模式区分" class="headerlink" title="按照环境模式区分"></a>按照环境模式区分</h3><p><code>package.json</code>中配置命令，其中<code>--host</code>可以在dev模式下，使用本机IP访问系统。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve --mode dev --host 0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve --mode serve&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service build --mode serve&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;prod&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vue-cli-service build --mode prod&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure><p>针对3个不同的环境，创建3个文件，这里定义在<code>src/api/**</code>中使用<code>process.env.VUE_APP_INTERFACE_URL</code>来获取当前环境下的API地址。</p><h4 id="dev环境"><a href="#dev环境" class="headerlink" title="dev环境"></a>dev环境</h4><p>根目录下新建<code>.env.dev</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">NODE_ENV = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_TITLE = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_INTERFACE_URL=<span class="hljs-string">&quot;http://***:19991&quot;</span> /* 请求接口地址 */<br>VUE_APP_PROXYURL=<span class="hljs-string">&#x27;/&#x27;</span> /* proxy代理地址 */<br>VUE_APP_MOCK = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="test环境"><a href="#test环境" class="headerlink" title="test环境"></a>test环境</h4><p>根目录下新建<code>.env.serve</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">NODE_ENV = <span class="hljs-string">&#x27;server&#x27;</span><br>VUE_APP_TITLE = <span class="hljs-string">&#x27;server&#x27;</span><br>VUE_APP_INTERFACE_URL=<span class="hljs-string">&quot;http://***:19991&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="production环境"><a href="#production环境" class="headerlink" title="production环境"></a>production环境</h4><p>根目录下新建<code>.env.prod</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">NODE_ENV=<span class="hljs-string">&#x27;production&#x27;</span><br>VUE_APP_TITLE=<span class="hljs-string">&#x27;prod&#x27;</span><br>VUE_APP_INTERFACE_URL=<span class="hljs-string">&quot;http://***:19999&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="打包去除console"><a href="#打包去除console" class="headerlink" title="打包去除console"></a>打包去除console</h3><p>因为开发环境写了一些log，打包上线时为了更加干净需要去除。<br>安装插件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install babel-plugin-transform-remove-console --save-dev<br></code></pre></div></td></tr></table></figure><p>在项目的<code>babel.config.js</code>的plugin中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],<br>  <span class="hljs-attr">plugins</span>:[<br>    ...proPlugins<br>  ]<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="打包到服务器指定目录下"><a href="#打包到服务器指定目录下" class="headerlink" title="打包到服务器指定目录下"></a>打包到服务器指定目录下</h3><p>如最终需要浏览器访问地址为http:&#x2F;&#x2F;***:port&#x2F;demo&#x2F;，就需要修改路径，已解决无法访问静态资源的问题。<br>修改<code>vue.config.js</code>中的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;/demo/&#x27;</span> : <span class="hljs-string">&#x27;/&#x27;</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>nginx中添加如下配置：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">location /demo/ &#123;<br>  root /data/; //root<br>  index index.html index.htm;<br>  try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /demo/;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3笔记（1）</title>
    <link href="/2022/04/26/vue3%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <url>/2022/04/26/vue3%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>人生兜兜转转几年没更新，转眼从产品变到项目管理又变成了前端。<br>最近使用Vue3+TS搭建了公司的服务平台，使用vue-cli5构建项目，UI使用了element-plus，记录一下代码写法和使用过程中的坑。</p></blockquote><span id="more"></span><h3 id="版本号对应"><a href="#版本号对应" class="headerlink" title="版本号对应"></a>版本号对应</h3><p>Vue CLI 4.5以下，对应的是Vue2。<br>Vue CLI 4.5及以上，对应的是Vue3，当然，创建项目的时候可以选择Vue2。</p><h3 id="配置使用IP访问"><a href="#配置使用IP访问" class="headerlink" title="配置使用IP访问"></a>配置使用IP访问</h3><p><code>package.json</code>中添加启动配置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve  --host 0.0.0.0&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/img/vue2-1.png" alt="vue3搜索"></p><h3 id="基础写法"><a href="#基础写法" class="headerlink" title="基础写法"></a>基础写法</h3><p>功能：通过表单内容搜索，列表展示搜索结果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;server-main&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span><br><span class="hljs-tag">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;serverUserFormRef&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;serverUserForm&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;alias_name&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;serverUserForm.alias_name&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias_name&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;Edit&quot;</span></span><br><span class="hljs-tag">          @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;handleAdd(serverUserFormRef)&quot;</span></span><br><span class="hljs-tag">        &gt;</span>创建<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in columns&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">          <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">show-overflow-tooltip</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; defineComponent, ref, reactive, toRefs, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getUsers, createUser&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/users&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span>, <span class="hljs-title class_">ElMessageBox</span>, <span class="hljs-title class_">ElNotification</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Search</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">FormInstance</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;XX&quot;</span>,<br>  <span class="hljs-attr">components</span>: &#123;&#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> emyptForm = &#123;<br>      <span class="hljs-attr">alias_name</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    &#125;<br>    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-attr">serverUserForm</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(emyptForm)),<br>      <span class="hljs-attr">tableData</span>:[]<br>    &#125;);<br>    <span class="hljs-keyword">const</span> columns = [<br>      &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;用户&quot;</span>, <span class="hljs-attr">prop</span>: <span class="hljs-string">&quot;alias_name&quot;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;200&quot;</span> &#125;,<br>    ];<br><br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">getData</span>();<br>    &#125;);<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-title function_">getUsers</span>(&#123;&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; data &#125; = res.<span class="hljs-property">data</span><br>        state.<span class="hljs-property">tableData</span> = data.<span class="hljs-property">results</span>;<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取数据错误！&#x27;</span>);<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">const</span> serverUserFormRef = ref&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">FormInstance</span>&gt;();<br>    <span class="hljs-keyword">const</span> rules = &#123;<br>      <span class="hljs-attr">alias_name</span>: [&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;请输入用户名&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;]<br>    &#125;;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">clearAll</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      state.<span class="hljs-property">serverUserForm</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(emyptForm));<br>    &#125;<br>    <span class="hljs-comment">// 新增</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = (<span class="hljs-params">formEl</span>) =&gt; &#123;<br>        formEl.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid: boolean</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (valid) &#123;<br>          <span class="hljs-keyword">const</span> params = state.<span class="hljs-property">serverUserForm</span>;<br>          <span class="hljs-title function_">createUser</span>(params).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>              <span class="hljs-keyword">const</span> &#123; code, data &#125; = res.<span class="hljs-property">data</span><br>              <span class="hljs-keyword">if</span>(code == <span class="hljs-number">0</span>) &#123;<br>                  <span class="hljs-title class_">ElNotification</span>(&#123;<br>                      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作成功&#x27;</span>,<br>                      <span class="hljs-attr">message</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;i&#x27;</span>, &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;color: teal&#x27;</span> &#125;, <span class="hljs-string">&#x27;用户已新增！&#x27;</span>),<br>                  &#125;);<br>                  <span class="hljs-title function_">getData</span>();<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;新增用户错误，请重试！&#x27;</span>);<br>              &#125; <br>          &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>              <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;服务器修复中，请稍后重试！&#x27;</span>);<br>          &#125;);<br>          <span class="hljs-title function_">clearAll</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      serverUserFormRef,<br>      ...<span class="hljs-title function_">toRefs</span>(state),<br>      rules,     <br>      handleAdd,<br>      columns,<br>    &#125;;<br>  &#125;<br>&#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作-短暂的PM随想</title>
    <link href="/2022/02/28/%E5%B7%A5%E4%BD%9C-%E7%9F%AD%E6%9A%82%E7%9A%84PM%E9%9A%8F%E6%83%B3/"/>
    <url>/2022/02/28/%E5%B7%A5%E4%BD%9C-%E7%9F%AD%E6%9A%82%E7%9A%84PM%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>这起起落落曲曲折折像极了人生。— ginny</p><span id="more"></span><p>记录我项目管理+产品经理的神奇一年。<br>悟出的都是人生。</p><p>需求就像渣男的出轨，只有零次和无数次。</p><p>不管有没有意义，真正做的事才让你不焦虑。</p><p>概念恒久远，ROI永流传。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作品集合</title>
    <link href="/2021/01/01/%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    <url>/2021/01/01/%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>奇奇怪怪的东西有空整理在这里。</p></blockquote><span id="more"></span> <ol><li><p>基于Spark的分布式人脸识别系统-前世你可能是只猫<br><img src="/../img/0-1.png" alt="前世你可能是一只猫"></p></li><li><p>基于WebGL的森林渲染，使用WebGL进行森林渲染，并力图实现渲染最优。<br><img src="/../img/0-2.png" alt="基于WebGL的森林渲染"><br><a href="https://guoningyan.com/dissertation/">毕设进展</a><br><a href="https://v.youku.com/v_show/id_XMzkwNTE4NDQ1Mg==.html?spm=a2hzp.8244740.0.0">毕设效果视频展示</a></p></li><li><p><a href="https://guoningyan.com/visual/">可视化课程网站</a></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>react笔记（3）react-redux数据管理</title>
    <link href="/2020/05/28/react%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89react-redux%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2020/05/28/react%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89react-redux%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前期考虑不周的坑，后期总要来填的。— ginny Guo<br>在这个项目的时候技术选型的时候，因为“时间周期较短”和“产品交流不充分”，没能完全get到prd中的一些细节问题，当时感觉传统的状态管理已经完全hold住这个项目了，结果在后期出现了一个state对应多个view改变，多个action触发一个state改变等问题。多个组件保留状态需要多个copy，简直是灾难啊啊！！！更加难过的是，后期出现了渲染太慢的问题，严重影响用户体验，所以不得不重构引入Redux状态管理了。<br>本篇记录了react-redux的使用，以及项目前后设计的对比，为以后技术选型做一个铺垫。<br>本篇真的写了好几天啊，好难讲清楚Orz，以后还要填坑几次才行。</p></blockquote><span id="more"></span><h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><p><code>Redux</code> 是 <code>JavaScript</code> 状态容器，提供可预测化的状态管理。<br>其数据流大致如下：<br><img src="/img/redux-1.jpg" alt="redux"></p><h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h4><p>Redux 中只有一个单一的 <code>Store</code> ，存储了所有共享状态（以一个对象树的形式储存）。<br>合并后的reducer（之后讨论）作为参数传入store。</p><p>根目录下入口文件index.js中添加store：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Provider</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> myreducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers&#x27;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(myreducers);<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></div></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Redux中把动作和状态独立，通过动作来改变状态。<code>Action</code> 是改变 <code>Store</code> 数据的唯一来源，包含 <code>View</code> 中数据变化、用户操作、服务器响应等等。</p><p>Redux中通过Action创建函数的结果（返回值是一个action对象），传给 <code>dispatch</code> 方法即可发起一次dispatch过程。<br>Store里能直接通过 <code>store.dispatch()</code> 调用dispatch方法。</p><p>Action本质上是一个对象，type是一个字符串常量，表示要执行的动作。<br>Action只有指定动作，不包含更新状态的方法，方法在下面的reducer中会提到。</p><p>触发AReducer的actions，存放于actions&#x2F;index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// some actions</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">AddSth</span> = (<span class="hljs-params">data</span>) =&gt; (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;sthAdd&#x27;</span>,<br>    data<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">DelSth</span> = (<span class="hljs-params">data</span>) =&gt; (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;sthDel&#x27;</span>,<br>    data<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">UpdateSth</span> = (<span class="hljs-params">data</span>) =&gt; (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;sthUpdate&#x27;</span>,<br>    data<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ClearList</span> = (<span class="hljs-params">data</span>) =&gt; (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;listClear&#x27;</span>,<br>    data<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p><code>Reducer</code> 是一个用于处理事件的纯函数，决定每个action如何改变应用的state。<br>在本项目中为了方便区分各个业务逻辑（互相独立），为每个业务逻辑编写一个reducer，存放于reducers文件夹中间，reduce文件夹中的index.js合并所有reduce，作为一个根级的reducer。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;combineReducers&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;reducers&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">BReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;reducers&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">CReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;reducers&#x27;</span>;<br><br><span class="hljs-keyword">const</span> myreducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>    <span class="hljs-title class_">AReducer</span>,<br>    <span class="hljs-title class_">BReducer</span>,<br>    <span class="hljs-title class_">CReducer</span>,<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> myreducers;<br></code></pre></div></td></tr></table></figure><p>单个reduce是形式为 <code>(state, action) =&gt; state</code> 的纯函数，state的形式可以是基本类型、数组、对象等等。在本项目中状态是存储的数据，数据用数组list来表示。</p><p>举例AReducer，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// reducer </span><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">AReducer</span>(<span class="hljs-params">list:[], action</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;data = &#123;&#125;&#125; = action;<br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sthAdd&#x27;</span>: &#123;<br>           <span class="hljs-keyword">const</span> arrIndex = _.<span class="hljs-title function_">findIndex</span>(<br>                list,<br>                <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">parseInt</span>(item.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>) === <span class="hljs-built_in">parseInt</span>(data.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (arrIndex &gt; -<span class="hljs-number">1</span>) &#123;<br>                list.<span class="hljs-title function_">splice</span>(arrIndex, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                list.<span class="hljs-title function_">push</span>(data);<br>            &#125;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sthDel&#x27;</span>: &#123;<br>            <span class="hljs-keyword">const</span> arrIndex = _.<span class="hljs-title function_">findIndex</span>(<br>                list,<br>                <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-built_in">parseInt</span>(item.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>) === <span class="hljs-built_in">parseInt</span>(data.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (arrIndex &gt; -<span class="hljs-number">1</span>) &#123;<br>                list.<span class="hljs-title function_">splice</span>(arrIndex, <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sthUpdate&#x27;</span>: &#123;<br>          list.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(item.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>) === <span class="hljs-built_in">parseInt</span>(data.<span class="hljs-property">id</span>, <span class="hljs-number">10</span>)) &#123;<br>                item.<span class="hljs-property">xxx</span> = data.<span class="hljs-property">xxx</span>;<br>              &#125;<br>              <span class="hljs-keyword">return</span> item;<br>          &#125;);<br>          <span class="hljs-keyword">return</span> list;<br>        &#125; <br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;listClear&#x27;</span>: &#123;<br>            <span class="hljs-keyword">return</span> [];<br>        &#125;<br><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="react-redux容器组件"><a href="#react-redux容器组件" class="headerlink" title="react-redux容器组件"></a>react-redux容器组件</h4><p><code>react-redux</code> 使用容器组件来把展示组件连接到Redux ，容器组件向Redux派发actions，同时监听state改变。<br>对于容器组件和展示组件的划分附录中有一篇官网推荐的阅读。目前来说，我在本项目中把需要处理共享数据的页面作为了容器组件，后期可能还要修改下。</p><p>可以使用 <code>mapStateToProps</code> 来订阅 <code>Store</code>，其原理相当于在Store上安装了一个监听器，当Store中state改变了，子组件重新渲染。<br>可以定义 <code>mapDispatchToProps</code> 方法接收dispatch()方法并返回期望注入到展示组件的props中的回调方法。<br>在本项目中把action作为props整合数据，相当于包了一层dispatch的执行。</p><p>假设AList为容器组件，AList中代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;connect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/AItem&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">AddSth</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">aList</span>: []<br>    &#125;;<br><br>    getBetList = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;list&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> list || [];<br>    &#125;<br><br>    listAddHandle = <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">AddSth</span>&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>        <span class="hljs-title class_">AddSth</span>(obj);<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> aList = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBetList</span>();<br>        <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">components-alist</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">          &#123;aList.map((item) =&gt; </span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AItem</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">onAdd</span> = <span class="hljs-string">&#123;this.listAddHandle.bind(this)&#125;/</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = state =&gt; (&#123;<br>    <span class="hljs-attr">aList</span>: state.<span class="hljs-property">list</span><br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapItemToProps, &#123;<span class="hljs-title class_">AddSth</span>&#125;)(<span class="hljs-title class_">AList</span>);<br></code></pre></div></td></tr></table></figure><p><code>附录</code>：<br><a href="https://www.redux.org.cn/">Redux</a><br><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Presentational and Container Components</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react笔记（2）websocket实时改变数据</title>
    <link href="/2020/05/14/react%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89websocket%E5%AE%9E%E6%97%B6%E6%94%B9%E5%8F%98%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/05/14/react%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89websocket%E5%AE%9E%E6%97%B6%E6%94%B9%E5%8F%98%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目中有个需求，需要实时改变数据。实时改变数据有两种方式。<br>第一种方式是通过Ajax轮询，浏览器需要不断的向服务器发出请求，在本项目中需要改变数据的地方有多处，连续的Ajax请求对服务器的压力很大，所以不适合这种方式。<br>第二种方式是通过HTML5 定义的 WebSocket 协议，使浏览器和服务器保持持久性的连接，服务端向客户端主动推送信息。<br>本项目中采用了第二种方式，这里对react中使用WebSocket实时改变数据做了一点笔记。</p></blockquote><span id="more"></span><h4 id="WebSocket简介"><a href="#WebSocket简介" class="headerlink" title="WebSocket简介"></a>WebSocket简介</h4><p><code>WebSocket</code> 是 HTML5 开始提供的一种在单个 <code>TCP</code> 连接上进行全双工通讯的协议，本质上是一个基于 <code>TCP</code> 的协议。<br>在 <code>WebSocket API</code> 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行<code>双向数据传输</code>。  </p><h4 id="WebSocket创建、使用API"><a href="#WebSocket创建、使用API" class="headerlink" title="WebSocket创建、使用API"></a>WebSocket创建、使用API</h4><p>创建 WebSocket 对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(url, [protocol] );<br></code></pre></div></td></tr></table></figure><p>在获取 WebSocket 连接后，可以通过 <code>send</code> 方法来向服务器发送数据，并通过 <code>onmessage</code> 事件来接收服务器返回的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Web Socket 已连接上，使用 send() 方法发送数据</span><br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;发送数据&quot;</span>);<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;数据发送中...&quot;</span>);<br>&#125;;<br>                <br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) &#123; <br>  <span class="hljs-keyword">var</span> received_msg = evt.<span class="hljs-property">data</span>;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;数据已接收...&quot;</span>);<br>&#125;;<br>ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>  <span class="hljs-comment">// 关闭 websocket</span><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;连接已关闭...&quot;</span>); <br>&#125;;               <br></code></pre></div></td></tr></table></figure><h4 id="react中使用WebSocket"><a href="#react中使用WebSocket" class="headerlink" title="react中使用WebSocket"></a>react中使用WebSocket</h4><p> 首先抽取一个通用方法开启WebSocket</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">startWs</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// wss://域名/api/wsname</span><br><br>    <span class="hljs-keyword">const</span> host = <span class="hljs-string">&#x27;aaa.com&#x27;</span>;<br>    <span class="hljs-keyword">let</span> protocol = <span class="hljs-string">&#x27;wss&#x27;</span>;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">host</span>: host2&#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> === <span class="hljs-string">&#x27;http:&#x27;</span> &amp;&amp; host2 !== <span class="hljs-string">&#x27;localhost:3000&#x27;</span>) &#123;<br>        protocol = <span class="hljs-string">&#x27;ws&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;protocol&#125;</span>://<span class="hljs-subst">$&#123;host&#125;</span>/api/wsname`</span>);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在page中使用WebSocket，并将数据传递给组件</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span> = <span class="hljs-title function_">startWs</span>();<br>    &#125;<br><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">watchWs</span>();<br>    &#125;<br><br>    componentWillUnmount = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-title function_">close</span>();<br>    &#125;<br><br>    watchWs = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">evt</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> data = &#123;&#125;;<br>            <span class="hljs-keyword">try</span> &#123;<br>                data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(evt.<span class="hljs-property">data</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e); &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                <span class="hljs-attr">currentData</span>: data,<br>            &#125;);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; item, currentData &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pages-index&quot;</span> &gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">currentData</span>=<span class="hljs-string">&#123;currentData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>组件接受数据后实时改变自身。<br>这里使用<code>getDerivedStateFromProps</code>这个生命周期，意思就是从props中获取state，即将传入的props映射到state上面，意味着即使你的props没有任何变化，而是父state发生了变化，导致子组件发生了re-render，这个生命周期函数依然会被调用。<br><code>getDerivedStateFromProps</code>是一个<code>静态函数</code>，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的<code>nextProps</code>以及<code>prevState</code>来进行判断，根据新传入的props来映射到state。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, prevState</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;currentData = &#123;&#125;&#125; = nextProps;<br>        <span class="hljs-keyword">if</span> (currentData !== prevState.<span class="hljs-property">currentData</span>) &#123;<br>          <span class="hljs-keyword">return</span> newObj &#123;<br>            <span class="hljs-attr">attr</span>: attr1<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;newObj&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;components-item&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;newObj.attr&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里Item组件通过接受父组件的props来改变自身状态。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react笔记（1）父子组件通信</title>
    <link href="/2020/05/07/react%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/2020/05/07/react%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 最近做了一个pc项目，技术选型为react，中间涉及到了各种状态管理、消息传递，做个小小的笔记记录下，方便以后做同类项目可以快速起步。</p></blockquote><span id="more"></span><h4 id="项目使用框架版本"><a href="#项目使用框架版本" class="headerlink" title="项目使用框架版本"></a>项目使用框架版本</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.9.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^16.12.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.41.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="父组件传递消息给子组件"><a href="#父组件传递消息给子组件" class="headerlink" title="父组件传递消息给子组件"></a>父组件传递消息给子组件</h4><p>父组件可以向子组件通过传 <code>props</code> 的方式进行通信。<br>子组件Child.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;ginny is a child&#x27;</span>,<br>            <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">const</span> &#123;name&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>      <span class="hljs-keyword">const</span> &#123;message&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;component-child&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件Father.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;I am father&#x27;</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Here is a message&#x27;</span><br>        &#125;<br>    &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;message&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;component-father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;message&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="子组件传递消息给父组件"><a href="#子组件传递消息给父组件" class="headerlink" title="子组件传递消息给父组件"></a>子组件传递消息给父组件</h4><p>子组件向父组件通讯，也是通过父组件向子组件传递 <code>props</code> 进行通讯，只是父组件传递的，是作用域为父组件自身的函数。子组件调用该函数，把想要传递的信息以参数的方式传递给父组件。<br>在子组件Child中绑定 onClick 事件。 调用 change 方法，在change方法中调用父组件的 childClick 方法。<br>子组件Child.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;ginny is a child&#x27;</span>,<br>            <span class="hljs-attr">messageFromChild</span>:<span class="hljs-string">&#x27;Here is a message from ginny!&#x27;</span><br>        &#125;<br>    &#125;<br><br>    change = <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">childClick</span>(msg);<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">const</span> &#123;name, messageFromChild&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>      <span class="hljs-keyword">const</span> &#123;message&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;component-child&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.change.bind(this,</span> <span class="hljs-attr">messageFromChild</span>)&#125;&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件Father.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;I am father&#x27;</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Here is a message&#x27;</span><br>        &#125;<br>    &#125;<br>  childClickHandle = <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Message form child is:&#x27;</span> + msg);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;message&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;component-father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;message&#125;</span> <span class="hljs-attr">childClick</span>=<span class="hljs-string">&#123;this.childClickHandle&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="函数this指向"><a href="#函数this指向" class="headerlink" title="函数this指向"></a>函数this指向</h4><p>本项目中涉及到各种函数调用，所以最后对 <code>this</code> 的指向问题稍微加一个小小的总结。<br>非箭头函数：<br>(1) <code>this</code> 指向调用其所在函数的对象（离其最近的对象）；<br>(2) 构造函数下，<code>this</code>与被创建的新对象绑定；<br>(3) DOM事件，<code>this</code>指向触发事件的元素；<br>(3) 当函数通过Function对象的原型中继承的方法 <code>call</code> 和 <code>apply</code> 方法调用时， 其函数内部的<code>this</code>值可绑定到 <code>call</code>和<code>apply</code> 方法指定的第一个对象上， 如果第一个参数不是对象，JavaScript内部会尝试将其转换成对象然后指向它；<br>(4) 通过<code>bind</code>方法绑定后， 函数将被永远绑定在其第一个参数对象上， 而无论其在什么情况下被调用；<br>(5) 当代码被内联处理函数调用时，它的<code>this</code>指向监听器所在的DOM元素；<br>(6) 当代码被包括在函数内部执行时，其<code>this</code>指向等同于 函数直接调用的情况，即在非严格模式指向全局对象<code>window</code>， 在严格模式指向<code>undefined</code>；<br>(7) 对于延时函数内部<code>setTimeout</code>和<code>setInterval</code>的回调函数的<code>this</code>指向全局对象<code>window</code>。<br>箭头函数：<br>(8) 箭头函数不绑定this， 它会捕获其所在（即定义的位置）上下文的<code>this</code>值， 作为自己的this值，<code>call,apply,bind</code>方法对于箭头函数来说只是传入参数，对它的<code>this</code> 无影响；</p><p>在本项目中，如果组件触发自身的方法，需要将方法写成箭头函数的形式，这样调用的时候就会指向自身，可以获取自身的state等等属性。如果不写成箭头函数，只是普通函数，则在绑定函数的地方需要使用this.change.bind(this)，把组件当前的this绑定在函数上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ngixn笔记（1） 前后端跨域设置</title>
    <link href="/2019/08/12/ngixn%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
    <url>/2019/08/12/ngixn%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司项目需要我调用别的部门开发的接口，由于部门之间服务器独立，必然涉及到了跨域问题。这篇文章记录了我配置的nginx，前后端允许跨域。</p></blockquote><span id="more"></span><h4 id="跨域的产生"><a href="#跨域的产生" class="headerlink" title="跨域的产生"></a>跨域的产生</h4><p>首先明确跨域的产生是由于浏览器通源策略，限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>发了请求之后迟迟没有收到回复，打开控制台一看，请求404了，再仔细找原因之后发现，我原来发送的<code>post</code>请求变成了<code>option</code>请求。<br><img src="/img/nginx1-error2.png" alt="chrome跨域"></p><p>chrome认为前端没有添加头部信息，所以不允许前端页面发出请求。<br><img src="/img/nginx1-error1.png" alt="chrome跨域"></p><h4 id="后端允许跨域（开发环境）"><a href="#后端允许跨域（开发环境）" class="headerlink" title="后端允许跨域（开发环境）"></a>后端允许跨域（开发环境）</h4><p>服务器默认是不被允许跨域的。给Nginx服务器配置<code>Access-Control-Allow-Origin *</code>后，表示服务器可以接受所有的请求源（Origin）,即接受所有跨域的请求。 <code>Access-Control-Allow-Methods</code> 是为了防止出现Content-Type is not allowed by Access-Control-Allow-Headers in preflight response. <code>Access-Control-Allow-Headers</code>是为了防止出现当前请求<code>Content-Type</code>的值不被支持，当发起了<code>application/json</code>的类型请求时添加这个头可以解决。<br>服务器nginx添加以下配置：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">location /myurl/ &#123;  <br>    add_header Access-Control-Allow-Origin *;<br>    add_header Access-Control-Allow-Methods <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br>    add_header Access-Control-Allow-Headers <span class="hljs-string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>        <span class="hljs-built_in">return</span> 204;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><p>对那些可能对服务器数据产生副作用的HTTP请求方法（特别是<code>GET</code>以外的HTTP请求，或者搭配某些MIME类型的<code>POST</code>请求），浏览器必须首先使用 <code>OPTIONS</code>方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的HTTP请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</p><p>Content-Type不属于以下MIME类型的，都属于预检请求：</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">application/x-www-form-urlencoded<br>multipart/form-data<br>text/plain<br></code></pre></div></td></tr></table></figure><p><code>OPTIONS</code>先行验证是否允许跨域，若不允许，就不会进行下一个<code>POST</code>请求，所以之前会出现请求404的情况。</p><h4 id="后端允许跨域（生产环境）"><a href="#后端允许跨域（生产环境）" class="headerlink" title="后端允许跨域（生产环境）"></a>后端允许跨域（生产环境）</h4><p>此时处于生产环境，允许所有请求不太安全，所以可以由后端自定义请求的格式，当格式符合条件时，才添加跨域头。<br>后端接口一般带有统一前缀，这里设置所有带有<code>api</code>的请求都可以绕过跨域限制。<br><code>nginx.conf</code>中修改结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">location /api &#123;<br>    add_header <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-string">&#x27;*&#x27;</span>;<br>    add_header <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="前端允许跨域（生产环境）"><a href="#前端允许跨域（生产环境）" class="headerlink" title="前端允许跨域（生产环境）"></a>前端允许跨域（生产环境）</h4><p>由于这个项目涉及到了不同部门的接口，某个前辈的接口并没有按照规定来写，所以这里前端需要自己修改一下地址格式。<br>例如：原来的请求地址为<code>http://abc.com/origin</code>，现在设计一个新的请求地址<code>http://abc.com/myapi/origin</code><br>修改nginx配置如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">location /myurl/ &#123;<br>    root /home/guoningyan/myproject/;<br>    index index.html;<br>    try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ @router;<br>&#125;<br><br>location /myapi/origin &#123;<br>    proxy_pass http://abc.com/origin;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>意思为当发送的请求以<code>/myapi/origin</code>为后缀时，自动代理到原请求地址<code>http://abc.com/origin</code>。<br>有一点要注意的是，在<code>nginx</code>中配置<code>proxy_pass</code>代理转发时，如果在<code>proxy_pass</code>后面的url加&#x2F;，表示绝对根路径；如果没有&#x2F;，表示相对路径。</p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue2笔记（1）</title>
    <link href="/2019/07/12/vue2%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <url>/2019/07/12/vue2%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近的项目用了vue2.0，备忘一些关键用法。这是第一篇，需求为展示一堆带有各自内容的卡牌，鼠标在卡牌上悬停时展示文字细节，点击时切换vue-router，所有数据在初始化时通过数组获取。本篇主要内容为v-for实现卡牌渲染，包括图片、文字绑定，针对特定卡片进行css特效选择等等。</p></blockquote><span id="more"></span><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/img/vue_cards.png" alt="cards"></p><h3 id="需求切分"><a href="#需求切分" class="headerlink" title="需求切分"></a>需求切分</h3><ol><li><p>数据格式为json，在data中输出</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">caseList<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;link&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/taxi&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Taxi tickets recognization --- quickly find out date, distance, price and so on. &quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CV&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;img&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;../assets/taxi-icon.png&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用v-for实现数组元素的循环渲染卡牌</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in caseList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>       <br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">item.img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;des&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p> 这个时候遇到一个问题，浏览器中图片并没有加载出来。<br> 我首先检查了一下相对路径没有问题，然后想到当把图片硬编码在html中时，<code>webpack</code>打包会用<code>loader</code>打包图片，这样图片的位置就改变了，所以需要在加载图片数据时加入<code>require</code>，这样图片就能展示出来了。<br> 修改如下:</p> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../assets/taxi-icon.png&quot;</span>)<br></code></pre></div></td></tr></table></figure></li><li><p>点击卡牌跳转页面<br>使用<code>router</code>来实现，<code>router</code>中也可以直接修改tag属性</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">item.link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>鼠标悬停在卡牌上方时出现特效<br>这里将<code>mouseenter</code>和<code>mouseleave</code>配合使用，通过改变DOM元素class的方式实现效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;enterCase&quot;</span> </span><br><span class="hljs-tag">    @<span class="hljs-attr">mouseleave</span>=<span class="hljs-string">&quot;leaveCase&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in caseList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[isHoverCase ? &#x27;img-change&#x27; : &#x27;img-wrap&#x27; ]&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></div></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data () &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">isHoverCase</span>:<span class="hljs-literal">false</span><br>  &#125;<br>&#125;,<br>methods () &#123;<br>    <span class="hljs-title function_">enterCase</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHoverCase</span> = <span class="hljs-literal">true</span>;<br>    &#125;,<br>    <span class="hljs-title function_">leaveCase</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHoverCase</span> = <span class="hljs-literal">false</span>;<br>    &#125; <br> &#125; <br></code></pre></div></td></tr></table></figure><p> 这时候出现了新的问题，当鼠标悬停在一张卡牌上时，所有的卡牌出现了相同的特效。<br> 思考了一下，这里我把isHoverCase设置成了所有卡牌都能访问的变量，当其中一个改变时，自然所有卡牌的class都改变了。<br> 查询资料后了解到设置index可以解决这个问题，于是给每一张卡牌添加了<code>isHoverCase:false</code>，在元素方法中添加<code>@mouseleave=&quot;leaveCase(index)&quot;</code>，元素class修改为<code>v-bind:class=&quot;[item.isHoverCase ? &#39;img-change&#39; : &#39;img-wrap&#39; ]&quot;</code>，完美解决。</p></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>template写法如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;enterCase(index)&quot;</span> @<span class="hljs-attr">mouseleave</span>=<span class="hljs-string">&quot;leaveCase(index)&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in caseList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">item.link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[item.isHoverCase ? &#x27;img-change&#x27; : &#x27;img-wrap&#x27; ]&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">item.img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;des&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>javascrip写法t如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>     data () &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">caseList</span>:[&#123;<br>          <span class="hljs-attr">link</span>:<span class="hljs-string">&#x27;/taxi&#x27;</span>,<br>          <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;Taxi tickets recognization --- quickly find out date, distance, price and so on. &#x27;</span>,<br>          <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;CV&#x27;</span>,<br>          <span class="hljs-attr">img</span>:<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/taxi-icon.png&#x27;</span>),<br>          <span class="hljs-attr">isHoverCase</span>:<span class="hljs-literal">false</span><br>        &#125;,&#123;<br>          <span class="hljs-attr">link</span>:<span class="hljs-string">&#x27;/translate&#x27;</span>,<br>          <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;Chinese-English translation --- use our dictionary to translate your sentences.&#x27;</span>,<br>          <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;NLP&#x27;</span>,<br>          <span class="hljs-attr">img</span>:<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/translate-icon.png&#x27;</span>),<br>          <span class="hljs-attr">isHoverCase</span>:<span class="hljs-literal">false</span><br>        &#125;],<br>      &#125;<br>     &#125;,<br>     <span class="hljs-attr">methods</span>: &#123;<br>       <span class="hljs-title function_">enterCase</span>(<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">caseList</span>[index].<span class="hljs-property">isHoverCase</span> = <span class="hljs-literal">true</span>;<br>      &#125;,<br>      <span class="hljs-title function_">leaveCase</span>(<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">caseList</span>[index].<span class="hljs-property">isHoverCase</span> = <span class="hljs-literal">false</span>;<br>      &#125;  <br>     &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="debug遇到问题"><a href="#debug遇到问题" class="headerlink" title="debug遇到问题"></a>debug遇到问题</h3><p>在适配手机样式时出现了一个小问题，我需要将手机链接电脑后用ip进行访问，但是当我将<code>vue-cli</code>起的服务<code>127.0.0.1:8080</code>改成本机<code>ip:8080</code>时，出现网页无法访问的情况。<br><img src="/img/openfail.png" alt="网页无法访问"><br>查询资料后发现，需要在<code>build/webpack.dev.conf.js</code>中间修改host，将<code>host:127.0.0.1</code>修改为<code>host:0.0.0.0</code>，重启服务，通过ip可以正常访问。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+flask前后端分离项目（3）</title>
    <link href="/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%883%EF%BC%89/"/>
    <url>/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是总结第三篇，包括linux服务器中nginx安装配置，使用nginx部署服务，以及允许跨域资源访问。</p></blockquote><span id="more"></span><p><code>Linux</code>中安装<code>nginx</code>网上很多文章都有写，附录链接中有我推荐的一篇。<br>简单的可以使用<code>apt-get</code>安装，但因为我没有root权限，所以只能通过源码安装，幸好服务器中大佬已经安装好gcc环境了，我只需要下载好直接编译就行。</p><h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget http://nginx.org/download/nginx-1.17.0.tar.gz<br>tar -zxvf nginx-1.17.0.tar.gz<br><span class="hljs-built_in">cd</span> nginx-1.17.0/<br>./configure --prefix=nginx<br>make &amp;&amp; make install<br></code></pre></div></td></tr></table></figure><p>启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nginx/<br>./sbin/nginx<br></code></pre></div></td></tr></table></figure><p>若遇到端口占用，可以先杀死进程再启动。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -A | grep nginx<br><span class="hljs-built_in">kill</span> -9 pid<br></code></pre></div></td></tr></table></figure><p>在浏览器输入 <a href="http://ip:port">http://ip:port</a> 地址，出现<code>Welcome to nginx!</code>即为安装成功。</p><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>接下来是修改端口，因为在服务器中我没有root权限，所以需要在<code>nginx.conf</code>中修改<code>listen</code>端口，并且端口号需要是大于1024的任何一个数字。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vi ~/nginx-1.17.0/nginx/conf/nginx.conf<br></code></pre></div></td></tr></table></figure><p><code>nginx.conf</code>中修改结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">server &#123;<br>    listen       1025;<br>    server_name  localhost;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>dist</code>文件夹是我的前端项目打包后生成的文件，存放于<code>/home/myname</code>之中，作为静态文件的根目录，我希望在浏览器中输入 <a href="http://ip:port">http://ip:port</a> 可以直接访问到dist中首页，所以还要修改下配置。<br><code>nginx.conf</code>中修改结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"> server &#123;<br>     listen       1025;<br>     server_name  localhost;<br><br>     location / &#123;<br>         root   root /home/myname/dist;<br>         index  index.html index.htm;<br>     &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="nginx跨域访问配置"><a href="#nginx跨域访问配置" class="headerlink" title="nginx跨域访问配置"></a>nginx跨域访问配置</h4><p>接下来在<code>nginx</code>中添加允许跨域访问，设置所有带有<code>api</code>的请求都可以绕过跨域限制。<br><code>nginx.conf</code>中修改结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">location /api &#123;<br>    add_header <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-string">&#x27;*&#x27;</span>;<br>    add_header <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一般还需要在第一行添加：（没有root权限的用户这一行是不起作用的）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">user root owner;<br></code></pre></div></td></tr></table></figure><p>保存修改后重启<code>nginx</code>，用浏览器打开 <a href="http://ip:1025/">http://ip:1025</a> ，就能直接访问到前端首页啦～也能顺利和服务端进行数据请求～愉快！</p><p><code>附录</code>：<br><a href="https://www.jianshu.com/p/7cb1a824333e">Linux环境nginx配置</a><br><a href="https://blog.csdn.net/shixiufang/article/details/44309971">如何在没有root权限下安装Nginx</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>nginx</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+flask前后端分离项目（2）</title>
    <link href="/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89/"/>
    <url>/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是总结第二篇，总结flask项目搭建，restful接口设计，以及返回结果中添加允许跨域头。</p></blockquote><span id="more"></span><h4 id="flask搭建server端"><a href="#flask搭建server端" class="headerlink" title="flask搭建server端"></a>flask搭建server端</h4><p>本项目采用<code>python3</code>环境，使用<code>pip3</code>安装依赖包。<br>如果直接用命令行生成<code>flask</code>项目，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> myProject<br><span class="hljs-built_in">cd</span> myProject<br>pip3 install flask<br></code></pre></div></td></tr></table></figure><h4 id="定义restful接口返回"><a href="#定义restful接口返回" class="headerlink" title="定义restful接口返回"></a>定义restful接口返回</h4><p>将<code>response</code>定义为如下格式的返回结果，其中<code>code=0</code>代表成功，<code>msg</code>由server端自定义返回结果的文字描述，<code>data</code>中为需要回传给客户端的内容，定义为<code>json</code>格式。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> jsonify<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    res = jsonify(&#123;<br>        <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: &#123; <br>            <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;这里是返回结果&#x27;</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> res<br></code></pre></div></td></tr></table></figure><p>我的前端请求使用的是<code>formData</code>格式，需要将请求变为字典格式后用<code>key-value</code>进行取值，遇到<code>file</code>形式的数据则直接使用<code>request.files[&#39;file&#39;]</code>进行取值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br>data = request.form.to_dict()<br>username = data.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br></code></pre></div></td></tr></table></figure><h4 id="flask中允许跨域"><a href="#flask中允许跨域" class="headerlink" title="flask中允许跨域"></a>flask中允许跨域</h4><p>在返回结果中允许跨域需要使用<code>flask_cors</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install flask-cors<br></code></pre></div></td></tr></table></figure><p>server端添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> *<br>app = Flask(__name__)<br>CORS(app, resources=<span class="hljs-string">r&#x27;/*&#x27;</span>)<br><br>res.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>res.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>] = <span class="hljs-string">&#x27;POST,GET,OPTIONS&#x27;</span><br>res.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="hljs-string">&#x27;x-requested-with,content-type&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="跨域小结"><a href="#跨域小结" class="headerlink" title="跨域小结"></a>跨域小结</h4><p>在（1）中已经总结了在开发环境中绕过跨域限制，现在对跨域作一个小结。<br>跨域是指从一个域名的网页去请求另一个域名的资，更加严格一点的定义是：只要协议，域名，端口有任何一个的不同，就被当作是跨域。<br>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br>经过测试，确实是只要server添加头信息，不管我是本地起的服务还是其他http服务，都能和接口顺利通信。</p><p><code>附录</code>：<br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+flask前后端分离项目（1）</title>
    <link href="/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%881%EF%BC%89/"/>
    <url>/2019/06/20/vue-flask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司项目需要我进行包装一下，厉害的大佬们训练好模型，全周期工程师我负责在用户和大佬代码之间搭桥，用vue+flask完成整个项目的搭建和部署。<br>写完前端写后端，写完后端改nginx，改完nginx配服务器环境，全周期超爽有木有～<br>这是总结第一篇，总结vue搭建纯前端项目以及在开发环境配置nodejs反向代理绕过浏览器跨域限制。</p></blockquote><span id="more"></span><h4 id="新建vue项目"><a href="#新建vue项目" class="headerlink" title="新建vue项目"></a>新建vue项目</h4><p>本项目的node和npm为全局安装版本，<code>node&gt;=6.0.0</code>，<code>npm&gt;=3.0.0</code>，使用<code>vue-cli</code>进行一键配置。<br>新建项目命令：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> projectName<br>vue init webpack client<br><span class="hljs-built_in">cd</span> client<br>npm run dev<br></code></pre></div></td></tr></table></figure><p>用浏览器打开<code>http://127.0.0.1:8080</code>看到有<code>vue</code>图片出现即启动成功。</p><p>文件目录格式如下图所示，需要在<code>component</code>中编写<code>vue</code>组件，在<code>router</code>中的<code>index.js</code>中配置路由。<br><img src="/img/vue_pro.png" alt="vue目录结构"></p><p>这时可能会出现一个问题，例如需要访问页面<code>http://://127.0.0.1:8080/a/</code>，浏览器却始终显示首页内容，url显示为<code>http://://127.0.0.1:8080/a#/</code>，解决方式是在<code>index.js</code>中添加一个<code>mode</code>参数，充分利用 <code>history.pushState</code> API来完成URL跳转。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">routes</span>: [&#123;&#125;]<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>生成打包命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm run build<br></code></pre></div></td></tr></table></figure><p>打包将在原目录下生成<code>dist</code>文件夹，<code>static</code>下面是打包后的静态文件<br><img src="/img/vue_dist.png" alt="dist目录"> </p><h4 id="vue中使用less"><a href="#vue中使用less" class="headerlink" title="vue中使用less"></a>vue中使用less</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install less less-loader --save--dev<br></code></pre></div></td></tr></table></figure><p><code>style</code>中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot; scoped&gt;<br>@import &#x27;../assets/reset.less&#x27;; <br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h4 id="使用axios发送请求"><a href="#使用axios发送请求" class="headerlink" title="使用axios发送请求"></a>使用axios发送请求</h4><p><code>vue</code>中推荐使用<code>axios</code>进行<code>http</code>请求处理。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install axios --save--dev<br></code></pre></div></td></tr></table></figure><p><code>script</code>中这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br>axios.<span class="hljs-title function_">post</span>(reqPath+<span class="hljs-string">&#x27;upload&#x27;</span>,form,config).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = res.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">if</span>(data.<span class="hljs-property">code</span> == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//do something </span><br>    &#125;<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br> &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="开发环境允许跨域"><a href="#开发环境允许跨域" class="headerlink" title="开发环境允许跨域"></a>开发环境允许跨域</h4><p>当我的客户端发起一个<code>post</code>请求后，迟迟没有收到server端的返回结果，打开控制台，发现了以下提示：<br><img src="/img/error2.png" alt="浏览器跨域"><br>在求助一个朋友之后得知，chrome内核已经把http头为json的返回强制做了cros ，即使加了跨域头也不行。所以需要在开发环境中使用nodejs做反向代理。<br>在<code>build/webpack.dev.conf.js</code>中修改代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;serverip:port&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样配置之后，请求接口时不要写完整地址，写成例如<code>./api/upload</code>的形式，即可绕过跨域限制。</p><h4 id="记录一个问题"><a href="#记录一个问题" class="headerlink" title="记录一个问题"></a>记录一个问题</h4><p>我在向后端发请求时还遇到过这样一个问题：<br><img src="/img/error1.png" alt="error1"><br>查阅资料后发现时找不到资源，我重启服务端之后问题解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MathQuiz-an Android Project</title>
    <link href="/2017/11/17/MathQuiz-an-Android-Project/"/>
    <url>/2017/11/17/MathQuiz-an-Android-Project/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MathQuiz是我在香港大学学习Smart Phone这门课程的个人作业，一个用来进行数学测验的android app。<br>使用API Level 24 with minimum API Level 21，使用AVD (Nexus S with resolution 800X480).<br>这篇文章将归纳我做这个小项目过程中遇到的难点和收获。</p></blockquote><span id="more"></span><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>这个项目我使用了android studio，app是root目录，manifests是配置文件，java是编写的业务代码文件，res是资源文件。<br><img src="/img/android-content.png" alt="android studio 文件目录结构"></p><h4 id="重要代码demo"><a href="#重要代码demo" class="headerlink" title="重要代码demo"></a>重要代码demo</h4><p><code>页面跳转</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(getBaseContext(), GradeActivity.class);<br>intent.putExtra(<span class="hljs-string">&quot;ansCorrect&quot;</span>,ansCorrect);<br>startActivity(intent);<br></code></pre></div></td></tr></table></figure><p><code>用户输入答案保留两位小数</code><br>这里我用了监听用户输入，当用户输入小数位数超过两位时，调用处理函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">checkDecimal</span><span class="hljs-params">(String text)</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">ifFormat</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (text.contains(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> text.indexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>            <span class="hljs-keyword">if</span> (index + <span class="hljs-number">3</span> &lt; text.length()) &#123;<br>                initPrompt(<span class="hljs-string">&quot;Warning&quot;</span>,<span class="hljs-string">&quot;If your answers are not integers, please round them to 2 decimal places.&quot;</span>);<br>                ifFormat = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ifFormat;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p><code>自定义图标提示框</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">initPrompt</span><span class="hljs-params">(String txt, String msg)</span> &#123;<br>        <span class="hljs-type">LayoutInflater</span> <span class="hljs-variable">inflater</span> <span class="hljs-operator">=</span> getLayoutInflater();<br>        <span class="hljs-type">View</span>  <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.prompt,(ViewGroup)findViewById(R.id.dialog;<br>        AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (TextView)dialog.findViewById(R.id.tv);<br>        message.setText(msg);<br>        builder.setTitle(txt);<br>        builder.setPositiveButton(<span class="hljs-string">&quot;OK&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-type">int</span> which)</span> &#123;<br>            &#125;<br>        &#125;);<br>        builder.setView(dialog);<br>        builder.setIcon(R.drawable.logo);<br>        builder.show();<br>    &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;8dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;textview show&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="神奇的错误"><a href="#神奇的错误" class="headerlink" title="神奇的错误"></a>神奇的错误</h4><p>在我调试代码的过程中控制台出现了这样的错误提示：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"> <span class="hljs-attribute">10</span>-<span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span>:<span class="hljs-number">11</span>.<span class="hljs-number">310</span> <span class="hljs-number">1689</span>-<span class="hljs-number">1689</span>/com.android.inputmethod.latin E/RichInputConnection: Unable to connect to the editor to retrieve text.<br><span class="hljs-attribute">10</span>-<span class="hljs-number">22</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span>:<span class="hljs-number">11</span>.<span class="hljs-number">310</span> <span class="hljs-number">1689</span>-<span class="hljs-number">1689</span>/com.android.inputmethod.latin D/RichInputConnection: Will try to retrieve text later.<br></code></pre></div></td></tr></table></figure><p>这个错误会导致控制台无法打印信息，给我的调试带来很大的麻烦。我google了很久也没有找到合适的解决方案，最后我重建了一个项目，将相关代码复制才强硬解决了这个问题，如果还有好的方式，希望看到的人能联系我，谢谢了。</p><p><code>附录</code><br><a href="https://github.com/ginny315/MathQuizAssignment">项目成果 &amp; github链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上海工作</title>
    <link href="/2017/07/01/%E4%B8%8A%E6%B5%B7%E5%B7%A5%E4%BD%9C/"/>
    <url>/2017/07/01/%E4%B8%8A%E6%B5%B7%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>2015年11月到2016年4月我随着原来的团队从一号店到了壹药网，2016年6月我大学毕业了，之后的一年一直在壹药网html5团队工作。</p><p>跟着这个团队两年的时间，从fresh man到一个可以自己做中等项目，为大型项目贡献代码的工程师，一路以来我经历了很多，也成长了很多。</p><span id="more"></span><p>团队有个创新项目“健康助手”（又名小依赖）app，主要用来帮助用户养成良好的生活习惯，顺便和公司的产品相结合，打卡竞赛排名靠前的用户将获得公司的奖励，也是公司产品的营销类app。这个项目采用hybrid架构，我们组承担了h5的功能编写，native端的解决方案则由其他同事承担。很荣幸，我深度参与了这个项目。</p><p>项目初期我承担了angular后台代码编写，由于竞赛规则设计的非常复杂，逻辑非常多，那段时间我每天都用大量时间在代码调试上，同时我还在写毕业设计，承受了很大的压力，但是最终我还是在规定时间完成了任务。</p><p>刚工作那段时间也是这个项目的迭代期，我负责了微信营销部分的代码编写，即邀请用户参与挑战。我阅读了很多微信的接口文档，也对hybrid底层交互进行了研究。同时我也参与了部分组件的编写。印象最深的是我编写的打卡成果统计的组件，这个app是基于系统时间的，测试只能在更改系统时间后进行。真正release（热更新上线）之后，晚上十点我拿着手机等待我的“按钮”（打卡成果统计的入口）出现，结果等了10秒钟都没出来，当时我特别惊慌，似乎懂了“程序员背锅”这个情景，这是我第一次参与的多用户线上项目的更新，难道出现了测试时没有出现的bug？还好又过了5秒之后，按钮出现了，虚惊一场。也让我懂得了程序员背负的压力之大。</p><p>几个月后我又接手了公司的大型项目CRM，一个医生用来看病的系统，并且完全编写了后期的更新迭代，这个项目的坑在于使用的IM插件需要时常更新，每次更新牵扯到之前的很多业务代码，所以测试需要很长时间。</p><p>接下来几个月公司的h5用户端也更新了，我参与了h5端的用户聊天代码的编写，和医生端终于能一起聊天了，也是很棒的！同时编写h5也是和两个很有经验的同事合作的，同事写代码用了很多trick，我也学到了很多。</p><p>在不断维护项目，迭代项目的过程中，我还有幸接到了一个新的项目。公司的BI客户端原来是用java编写的，现在希望能做成前后端分离的形式，并且使用更丰富的图表展示，方便用户研究和运营的同事进行新活动策划。这个项目中我深入学习了echarts，进行了各种代码的封装和重用。</p><p>2017年6月，由于我要去香港大学深造了，向这个团队提出了离职，这是陪伴我长大的一个团队，不管是从技术上还是与人相处上，感谢我迈上社会的第一步遇上了你们，我的同事也是我终身的朋友。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWA -- Progress Web App</title>
    <link href="/2016/12/20/pwa/"/>
    <url>/2016/12/20/pwa/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Progress Web App目的在于利用现代浏览器的能力来达到类似APP的用户体验，让浏览器打开的网址像APP一样运行在手机上（无框架限制）。但是可能会使浏览器的负荷增加导致崩溃，所以提倡使用渐进式开发。<br>参加了Google Developer Day之后，对PWA这个概念有了自己的理解，个人觉得在可期的未来PWA会有很好的发展，值得深入学习。</p></blockquote><span id="more"></span> <h5 id="PWA简介"><a href="#PWA简介" class="headerlink" title="PWA简介"></a>PWA简介</h5><p><img src="/img/pwa.jpg" alt="PWA"><br><code>特性：</code></p><blockquote><p>支持将图标添加到屏幕，从屏幕点击启动<br>支持全屏体验<br>支持离线应用（利用Service Worker来实现离线存储）<br>支持Push Notification </p></blockquote><p><code>优势</code></p><blockquote><p>跨平台，任何安装符合标准的浏览器的设备上均可运行<br>渐进式，无论用户使用什么浏览器，始终以渐近增强为原则<br>低网速离线情况下依然有较好的用户体验<br>实时持续更新<br>使用TLS来保证传输安全<br>对搜索引擎友好<br>推送通知可以让用户再次访问变的容易</p></blockquote><p>除了Chrome支持以外，Firefox和Opera也支持了PWA</p><h5 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h5><p>相当于一个用户端的代理，拦截url，优先从缓存中获取资源，若缓存中没有，则向服务端请求。<br><code>优势及作用</code><br>预缓存加载，也可以作为file cache（static）。<br><img src="/img/service-worker.jpg" alt="service-worker"></p><blockquote><p>现在Service Worker在chrome、firefox和opera中是被支持的。Safari和Edge也正在努力中。<br>devtool - application - service worker</p></blockquote><h5 id="PWA设计概念-–-peanut-M-amp-M"><a href="#PWA设计概念-–-peanut-M-amp-M" class="headerlink" title="PWA设计概念 – peanut M&amp;M"></a>PWA设计概念 – peanut M&amp;M</h5><p>Aaron把PWA比作peanut M&amp;M，这是一种称为<code>应用外壳架构</code>的设计概念，javascript是一种外壳，是需要存储在浏览器中，保证始终可用，当无互联网连接（ offline）时，也能保证用户能看到应用的基本框架，而不是一片空白或者错误提示。<br>css相当于中间的巧克力层，可以缓存，也可以从服务端获取。<br>content（即需要）相当于里面的花生，可以缓存，也可以直接从服务端获取。但是一般来说内容是动态的，可能频繁发生改变，所以大部分都是从服务端获取（项目设计中应该尽量减少把不必要的内容都存储下来）。</p><h5 id="Manifest-json"><a href="#Manifest-json" class="headerlink" title="Manifest.json"></a>Manifest.json</h5><p>PWA主要一个 <code>Manifest.json</code>来配置一些功能，可以设置浏览器的样式，添加到屏幕的图标等等。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PWA DEMO FM.202&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;short_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FM.202&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Simple Progressive Web App for ginny&#x27;s friends.&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;assets/icons/ic-face.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;72x72&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;assets/icons/ic-face-large.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;144x144 256x256&quot;</span> <br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.html&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;display&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standalone&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;background_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;theme_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;orientation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;portrait&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>可以通过Chrome的“添加到主屏幕”按钮，保存到主屏幕上。<br>只有满足如下条件时窗口才会显示。</p><blockquote><p>1、有一个有效的 Web Manifest。<br>2、安装有有效的 Service Worker。<br>3、通过 HTTPS 访问应用程序。</p></blockquote><h5 id="测试工具Lighthome"><a href="#测试工具Lighthome" class="headerlink" title="测试工具Lighthome"></a>测试工具Lighthome</h5><p>对PWA的评分工具，包括检测在各种网络状态下应用的加载情况。仅测试静态网页，对用户交互等动态行为并不作评分。可以在chrome插件中找到。<br>swPrecache进行预抓取，有service worker一整套体系。</p><p><code>参考链接</code><br><a href="https://www.w3.org/TR/service-workers/">Service Worker W3C官方草案</a><br><a href="https://www.chromestatus.com/features">chrome-feature</a><br><a href="https://developers.google.com/web/updates/2015/12/getting-started-pwa">Getting Started with Progressive Web Apps</a><br><a href="https://pwa.rocks/">有趣的PWA游戏和工具</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于requestAnimationFrame</title>
    <link href="/2016/12/04/%E5%85%B3%E4%BA%8ErequestAnimationFrame/"/>
    <url>/2016/12/04/%E5%85%B3%E4%BA%8ErequestAnimationFrame/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这两个礼拜做图文h5的时候看到同组大神一个关于渲染的神奇写法，用了requestAnimationFrame这个之前我从来没有使用过的属性。<br>看了hax的知乎live，其中也提到了浏览器的渲染问题，特意查了paper做个总结。</p></blockquote><span id="more"></span> <h5 id="一个简单的需求"><a href="#一个简单的需求" class="headerlink" title="一个简单的需求"></a>一个简单的需求</h5><p><code>setBtnStatus</code>这个函数用来设置按钮状态，这个按钮主要做submit作用，也包含对表单提交的检验，当用户输入没有经过校验时，按钮置灰，用户输入满足时，按钮可以点击（即用户点击之后可以提交表单）。<br>macsen110大神指导我写的一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">setBtnStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">var</span> addressSave = $(<span class="hljs-string">&#x27;#addressSave&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (that.<span class="hljs-title function_">isReady</span>()) &#123;<br>        addressSave.<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;disabled&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        addressSave.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;disabled&#x27;</span>,<span class="hljs-literal">true</span>)<br>    &#125;<br>    that.<span class="hljs-property">reqId</span>=<span class="hljs-title function_">requestAnimationFrame</span>(that.<span class="hljs-property">setBtnStatus</span>.<span class="hljs-title function_">bind</span>(that));<br>&#125;,<br><br><span class="hljs-keyword">var</span> requestAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> || <br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> || <br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> || <br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> || <br>        <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>)&#123;<span class="hljs-keyword">var</span> id = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>);<span class="hljs-keyword">return</span> id;&#125;;<span class="hljs-comment">//IE9- 兼容</span><br><br><span class="hljs-keyword">var</span> cancelAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span> || <br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozCancelAnimationFrame</span> || <br>        <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)&#123;<span class="hljs-built_in">clearTimeout</span>(id);&#125;;<br></code></pre></div></td></tr></table></figure><p>调用<code>requestAnimationFrame</code>API可以让开发者写出更流畅的动画，以时间戳为单位（帧间隔），代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handle = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(callback); <br></code></pre></div></td></tr></table></figure><p>调用<code>requestAnimationFrame</code>这个函数需要一个回调函数作为参数，当下一个画面（frame）到来之前执行。这样实现在帧间隔给按钮平滑变色。</p><h5 id="浏览器的反馈—用户已访问"><a href="#浏览器的反馈—用户已访问" class="headerlink" title="浏览器的反馈—用户已访问"></a>浏览器的反馈—用户已访问</h5><p>浏览器有一个数据库专门用来存储用户已经访问过的URLs，有些浏览器可以决定如何展现用户已经点击过的链接，比如加深颜色等等，这些都是浏览器的默认行为。<br>IE和firefox的数据库操作行为是异步的，当操作结果还没返回时，表现为unvisited，返回时将触发页面的重绘操作，给这个链接添加访问过的标记。Chrome的数据库操作是同步的，只有全部操作完成才会渲染整个页面。<br>当链接中的地址被js改变时，IE中不会发生visited-&gt;unvisited的改变，这个改变会在firefox中发生。而在Chrome中只有改变链接并手动点击才会触发渲染，所以需要用js控制强制重绘。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.guoningyan.com&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>过宁妍<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;link&#x27;</span>); </span><br><span class="language-javascript">el.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.google.com&#x27;</span>; </span><br><span class="language-javascript">el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;&#x27;</span>; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h5 id="浏览器的重绘（redraw）事件是可以被嗅探的"><a href="#浏览器的重绘（redraw）事件是可以被嗅探的" class="headerlink" title="浏览器的重绘（redraw）事件是可以被嗅探的"></a>浏览器的重绘（redraw）事件是可以被嗅探的</h5><p>众所周知，帧渲染时间最佳为每秒60次（60fps，渲染一帧的时间为1000ms&#x2F;60&#x3D;16.7ms，这样人眼不会察觉到卡顿），<code>requestAnimationFrame</code>时间间隔为帧间隔，渲染时间可能会比16.7ms更短，而<code>阴影shadow</code>和<code>透明度transparency</code>或者是大量复杂的样式改变会影响浏览器的渲染时间（painting step），导致渲染时间变长，这段时间可能经历了很多帧，所以通过<code>requestAnimationFrame</code>可以计算出画面切换之间的时间。<br>恶意的网站可以通过浏览器对网页的渲染时间差窃取用户的敏感数据，即用户访问的历史记录。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-keyword">var</span> delay = time – lastTime;<br>  <span class="hljs-keyword">var</span> fps = <span class="hljs-number">1000</span>/delay;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(delay + <span class="hljs-string">&#x27;ms&#x27;</span> fps);<br>  <span class="hljs-title function_">updateAnimation</span>();<br>  <span class="hljs-title function_">requestAnimationFrame</span>(loop);<br>  lastTime = time;<br>&#125;<br><span class="hljs-title function_">requestAnimationFrame</span>(loop);<br></code></pre></div></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><code>requestAnimationFrame</code>可以进行帧变化操作，可以使动画更流畅。阴影颜色等重绘耗时长的操作在对用户已访问的标记上是应该禁止使用的，浏览器的不同操作会导致用户浏览信息泄露。</p><p><code>参考资料</code><br><a href="https://www.contextis.com/documents/2/Browser_Timing_Attacks.pdf">Browser_Timing_Attacks.pdf</a><br><a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/">张鑫旭的博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调试技巧之暴露全局方法</title>
    <link href="/2016/10/19/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%9A%B4%E9%9C%B2%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95/"/>
    <url>/2016/10/19/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%9A%B4%E9%9C%B2%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近的项目中使用了setInterval轮询，由于浏览器执行轮询时会阻塞其他，造成了一些麻烦。<br>本文记录一下测试时候在代码中放置的两个全局方法，用于在浏览器console中进行调用，开启和关闭轮询。</p></blockquote><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myIntervel = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//doing sth;</span><br>&#125;,spollingTime);<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">cancleIntervel</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;    <br>    <span class="hljs-built_in">clearInterval</span>(myIntervel);<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">refreshWindow</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>浏览器console中输入<code>window.cancleIntervel()</code>则轮询暂停；<br>浏览器console中输入<code>window.refreshWindow()</code>则重新刷新页面，就和手动刷新一个效果；</p><p><code>注意</code><br>暴露给window的方法必须是原生js自带的方法，项目用了angularjs框架，一开始我直接使用了框架中的暂停语法糖，自然是控制台报错了，这点要注意哦～</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas实践笔记</title>
    <link href="/2016/08/21/canvas%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    <url>/2016/08/21/canvas%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对canvas使用有过好几次了，曾经用基于canvas的createjs写过一个俄罗斯方块的游戏，毕业设计做的是多人在线绘图网站，自然也是canvas实现的。<br>最近工作需要，需要在h5端调用canvas API实现生成一张带有数据图的图片，“传送给native端”，所以对canvas的使用做一个总结。[2016-08-27更正：生成图片需要走http传输协议，app内与native通信走file传输协议，协议不同，不能直接通信，所以不能完成直接传送给native，只能传送给server端。]<br>由简到难，本文首先简单介绍canvas几个常用API，然后给出图片预加载的代码，最后会列举绘制过程中的多个坑。</p></blockquote><span id="more"></span><p>SVG绘制图形是通过构建一棵XML树来实现，canvas来绘制图形是通过调用它提供的方法。所以在canvas中移除相应的元素需要先将当前的相应元素擦除，然后重新绘制。</p><p>业务实现效果图，制作过程3.5天，踩了不少坑，下面进行详细讲解。<br><img src="/img/canvas-jk.png" alt="jk-img"></p><h5 id="图形绘制一些简单的API"><a href="#图形绘制一些简单的API" class="headerlink" title="图形绘制一些简单的API"></a>图形绘制一些简单的API</h5><p>canvas标签在html文档流中存放，标签内的区域都是画布，所以可以在标签上直接设置画布的长宽。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mycanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100</span> <span class="hljs-attr">height</span>=<span class="hljs-string">100</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>前面已经说过，canvas需要调用API来绘制图形，大部分API需要调用一个上下文对象来实现，所以需要<code>getContext(&#39;2d&#39;)</code>方法（传参2d）来获取这个CanvasRenderingContext2D对象，使用这个对象来实现在画布上绘制二维图形。<br><code>注意</code>每个canvas元素只有一个上下文对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;mycanvas&#x27;</span>);<br><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绘制路径；</span><br><span class="hljs-comment"> * beginPath开始，closePath结束，绘制比较粗糙；</span><br><span class="hljs-comment"> * 手动lineTo结束位置到起点位置，绘制比较精细；</span><br><span class="hljs-comment"> * 完成一条路径后重新开始另一条路径，必须有beginPath</span><br><span class="hljs-comment"> */</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">closePath</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  画圆－（0,360）的弧线</span><br><span class="hljs-comment"> *  context.arc(left, right, radius, 0, Math.PI*2);</span><br><span class="hljs-comment"> */</span><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#999&#x27;</span>;<br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">30</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>*<span class="hljs-number">2</span>);<br>context.<span class="hljs-title function_">closePath</span>();<br>context.<span class="hljs-title function_">stroke</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  画矩形</span><br><span class="hljs-comment"> *  rect(x, y, width, height)</span><br><span class="hljs-comment"> */</span><br>context.<span class="hljs-title function_">rect</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">fill</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 填充路径区域；</span><br><span class="hljs-comment">* 如果路径没有闭合，则默认起点与终点连接；</span><br><span class="hljs-comment">* 可以通过先设置类属性来控制外观；</span><br><span class="hljs-comment">*/</span><br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#ccc&#x27;</span>;<br>context.<span class="hljs-title function_">fill</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描边；</span><br><span class="hljs-comment"> * 可以通过先设置类属性来控制外观；</span><br><span class="hljs-comment"> */</span><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#008&#x27;</span>;<br>context.<span class="hljs-title function_">stroke</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置字体和大小</span><br><span class="hljs-comment"> */</span><br> context.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;40pt Calibri&quot;</span>;<br> context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>, x, y);<br></code></pre></div></td></tr></table></figure><p><a href="http://jsbin.com/xapiqe/3/edit?html,css,js,output">在线demo</a></p><blockquote><p>实践过程中发现context.fill()有个坑，特别是在给矩形填充颜色的时候，context的指向会出现问题，可能会将之前已经填充的内容重新填充。<br>简易使用context.fillRect()这个属性来填充矩形。<br>如果不可避免需要使用context.fill()这个属性，尽量提前使用，不要影响到后面的内容。</p></blockquote><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">DrawPic</span>(<span class="hljs-params">imgParam,left,top</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = left || <span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span> = top || <span class="hljs-number">0</span>;<br>  context.<span class="hljs-title function_">drawImage</span>(imgParam,<span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>[业务需求]：将切图展示在画布的指定位置，设置图片大小<br>canvas绘图阻塞浏览器，按顺序执行，画图之前需要图片全部加载成功，作者编写了图片预加载功能，在完全加载完成后进行绘制。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">batchProcessingImgs</span>(<span class="hljs-params">imgList,newImgList</span>)&#123;<br>  imgList.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">pre,cur</span>)&#123;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-title function_">createNewImg</span>(cur)<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    newImgList.<span class="hljs-title function_">push</span>(img);<br>  &#125;<br>&#125;,&#123;&#125;)<br><span class="hljs-keyword">return</span> newImgList;<br>&#125;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span>(imgList.<span class="hljs-property">length</span> == newImgList.<span class="hljs-property">length</span>)&#123;<br>    <span class="hljs-comment">//do something</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>imgList存储图片源文件，newImgList存储加载完成的图片，只有当两个list长度相等时，图片完全加载完成，可以进行画布绘制，另外加载图片的过程是浏览器的异步行为，newImgList中的图片顺序和imgList不一定相同，所以需要根据名字查询图片信息。（在附录的链接中作者给出了完整的实现）</p><h5 id="缩小图片并剪裁成圆形"><a href="#缩小图片并剪裁成圆形" class="headerlink" title="缩小图片并剪裁成圆形"></a>缩小图片并剪裁成圆形</h5><p>[业务需求]：展示用户的圆形小头像，后端返回的是一定尺寸的大头像，所以我需要先等比例缩放，然后进行圆形裁剪。<br>需要注意的是，arc+clip的方法只对绘制的图形产生效果，对图片不起作用。<br>所以只能用填充的方法，设置一个填充pattern(ctx.createPattern(image, repetition))，但是填充的效果是图片的原像素尺寸，如果原图是一张超大图，很有可能填充的只是黑色的一个小角，所以在填充之前需要对原图进行等比例缩小。<br>有个CanvasPattern.setTransform(matrix)的方法，matrix是SVG的缩放方式，OMG！难道写canvas还要和SVG合用吗？好吧，尝试之后遇到了更难过的结果，连亲爱的chrome都不支持！那就别说其他浏览器了。<br>换种思路，能不能用别的方式缩小图片呢？还是老大厉害，鼓励我尝试了先将图片绘制在另一个canvas上下文中，然后将新的canvas调整到我所需要的尺寸，然后将新的canvas作为填充pattern填充到老canvas的fill中，尝试结果，完美实现填充！</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按比例缩小图像并裁剪</span><br><span class="hljs-comment"> * left，top:左上角</span><br><span class="hljs-comment"> * radius:裁剪后的圆半径，注意是半径</span><br><span class="hljs-comment"> * 比较宽和高，小的设置为圆的直径长，大的裁剪为scaleBorder</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">scaleAndClipImageToRound</span>(<span class="hljs-params">context,img,left,top,radius</span>)&#123;<br>  <span class="hljs-keyword">var</span> scaleBord,<br>  width = img.<span class="hljs-property">width</span>,<br>  height = img.<span class="hljs-property">height</span>;<br>  context.<span class="hljs-title function_">save</span>();<br>  <span class="hljs-keyword">var</span> newCanvans = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>  newCanvans.<span class="hljs-property">width</span> = img.<span class="hljs-property">width</span>;<br>  newCanvans.<span class="hljs-property">height</span> = img.<span class="hljs-property">height</span>;<br>  <span class="hljs-keyword">var</span> newCtx = newCanvans.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>  scaleBord = (width &gt;= height ? <span class="hljs-number">2</span>*radius/height : <span class="hljs-number">2</span>*radius/width);<br>  newCtx.<span class="hljs-title function_">scale</span>(scaleBord,scaleBord);<br>  newCtx.<span class="hljs-title function_">drawImage</span>(img,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">var</span> p = ctx.<span class="hljs-title function_">createPattern</span>(newCanvans,<span class="hljs-string">&quot;no-repeat&quot;</span>);<br>  context.<span class="hljs-property">fillStyle</span> = p;<br>  context.<span class="hljs-title function_">translate</span>(left, top);<br>  context.<span class="hljs-title function_">beginPath</span>();<br>  context.<span class="hljs-title function_">arc</span>(radius, radius, radius, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>*<span class="hljs-number">2</span>);<br>  context.<span class="hljs-title function_">fill</span>();<br>  context.<span class="hljs-title function_">closePath</span>();<br>  context.<span class="hljs-title function_">restore</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="状态堆栈"><a href="#状态堆栈" class="headerlink" title="状态堆栈"></a>状态堆栈</h5><p>画布API允许保存当前画布的状态，采用的是堆栈的方式，采用save和restore方法，相当于push和pop，恢复堆栈中的状态。也可以理解为PS的一个图层，作者实践过程中在使用context.scale()这个属性的时候一定需要调用pop和restore。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">context.<span class="hljs-title function_">save</span>();<br>context.<span class="hljs-title function_">restore</span>();<br></code></pre></div></td></tr></table></figure><h5 id="toDataURL时间上的坑"><a href="#toDataURL时间上的坑" class="headerlink" title="toDataURL时间上的坑"></a>toDataURL时间上的坑</h5><p>业务需求需要先向后端请求数据，然后进行绘制，我在做这个需求的时候遇到两个坑。<br>第一个坑：toDataURL后发现ajax请求的数据还没有返回，所以canvas没有画完。因为ajax请求是异步的，无法判断精确data的返回时间，所以只能在请求成功的回调中进行绘制方法的调用。（附录代码段中作者封装了多个请求执行完毕后处理绘图）<br>第二个坑：需要在图片预加载结束后画图，然后toDataURL，本地运行时图片加载时间可以忽略不计，而生产环境时加载图片是需要一定时间的，所以判断加载完成的js语句根本没有执行。解决方法是每加载一次图片时进行图片加载判断，即有100张图片就需要执行100次判断，直到第100次判断图片加载完全执行完毕，调用绘图方法进行绘制。</p><p><code>附录</code><br><a href="https://github.com/ginny315/canvas-h5tonative/tree/master/canvas-drawProgressBar-function">我的纯函数式实现canvas绘制设计稿代码</a><br><a href="https://github.com/ginny315/canvas-h5tonative/tree/master/canvas-draw-objForm">我的对象方法整理版（包括处理多个请求）代码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular笔记（3）我所理解的MV*</title>
    <link href="/2016/08/01/angular%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84MV/"/>
    <url>/2016/08/01/angular%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84MV/</url>
    
    <content type="html"><![CDATA[<blockquote><p>大学里写java web，用过struct2和Hibernate框架，接触了后端MVC；<br>大四实习的时候自学了nodejs的express框架，并且在此基础上做了我的毕业设计，这也是一个基于MVC的后端框架；<br>近期工作的这段时间，也在做基于angular的后台的开发和维护。angualr是基于MVVM的前端框架，MVVM是MVC的衍生，把C用VM来替代，但是MVC的原理依旧是可以解释地通的（作者研究过前端设计模式，也有自己的观点，有疑惑请在评论里讨论）。</p></blockquote><span id="more"></span><p><code>java开篇</code><br>这里的java的设计模式和目前在做java开发的<a href="http://blog.csdn.net/yiluxiangqian7715">@组长ZJP同学</a>讨论过，用一张图简单地描述下。</p><p><img src="/img/angular3-mvc.png" alt="java中的MVC"></p><p>相信了解过MVC的朋友都知道，Model代表数据存储，用来处理数据库相关操作，一般会使用<a href="http://baike.baidu.com/link?url=jdLF0XztJUiIqHYzJONBdJYeHO7ZS_dWsRuTP1hVdvZWz_wAZsgHUaWtMWLeHeDgwV_j5VmbYLYvq0BCy2NCnK">ORM</a>进行封装，降低藕合度。<br>View代表视图层，在后端渲染的情况下一般是jsp页面，而在前端渲染的情况下，可能是web端或者是客户端的某些页面，用户操作致使View发送request请求。<br>Control代表控制器，顾名思义，整个流程依赖Control进行控制，所以View中的请求会经过Control处理，然后返回response给View，而view处理的业务逻辑对客户端是不透明的，用户也不用去理会数据库是怎样的操作，所以这些“黑盒”操作都是由后端程序员完成。Control返回的response也有两种方式，像structs2采用的是action跳转，这是一种可以直接返回jsp页面的方式，还有一种是我们熟悉的后端返回json数据的方式。<br>图中关于Model，引申出了service，在一些不算复杂的框架中，可能就模糊了Model的概念，直接由service处理业务逻辑，框架的选型还是结合业务相关，这里不再赘述。</p><p><code>Nodejs express框架深入</code><br>这里选用了我毕设用的目录结构做说明。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">- db<br>  - admin.js<br>  - user.js<br>- routers<br>  - loginServer.js（require(<span class="hljs-string">&#x27;../db/user.js&#x27;</span>)）<br>  - adminServer.js（require(<span class="hljs-string">&#x27;../db/admin.js&#x27;</span>)）<br>- app.js<br></code></pre></div></td></tr></table></figure><p>我选用了mongoose包作为中间层，所以很明显可以看出db文件夹下就是ORM，每个单独的js文件代表数据库中的一张表，将数据类型相关以及CRUD操作进行封装，和Model类似，每个单独的js文件类似一个service实现类。<br>而router是一种路由的概念，每个**Server.js文件代表一个操作，需要调用db中的方法（类似于control调用service完成某个功能）。再划分细一点，router可以把不同请求对应到不同的方法中进行处理，此时router相当于一个过滤器和领路的作用，扩大了control的功能。而这些js文件会返回处理后的response。<br>app.js是项目启动文件，数据库连接，调用router方法等等，前端所有的请求request都需要经过app.js后，调用模块中的方法进行处理。</p><p><code>终于回到了重点angular</code><br>首先也先进行项目目录结构划分</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">－ js<br>  - app.js(root作用，调用service中的数据)<br>  - common.js(factory、service、provider)<br>  - main.js<br>  - router.js(可以直接写路由，也可以通过ui-router这种插件根据状态来改变页面渲染)<br>－ moudules<br>  - moduleName<br>    - ***.html<br>    - ***.js(controller)<br></code></pre></div></td></tr></table></figure><p>这里将页面划分为组件，每个contrller控制一个视图模型。<br>app.js起到root作用，包含了所有的controller。即这是一个总控制器。<br>common.js起Modul作用，在angular中有factory、service、contrller三个分类，service通过“构造器”（构造函数）创建，这个构造器即factory，而这些service又可以称为factory的实例化对象（实现类），以对象的形式存在。provider是一种更高级（可以通过config进行配置）的factory，作用也类似。<br>解释了这么多，再说一下angular的范式要求。在写angular的时候，尽量要将业务逻辑处理放在controller中，尽量不要在controller直接获取数据后处理，应该让service获取接口数据，此时的service相当于Model，这样angular的设计模式就完全和java对应了。</p><p><code>总结</code><br>都说angular适合后端程序员，确实总结时候发现了其中的相似之处非常多，当然，学好设计模式，框架什么的都是套路！</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端开发总结（1）</title>
    <link href="/2016/07/31/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%881%EF%BC%89/"/>
    <url>/2016/07/31/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>移动端布局一直是困扰我的一个大问题，特别是去年在某电商实习期间曾经做一个活动页做了好久好久好久，现在工作期间遇到活动页或者微信传播页也是必须要按时快速高质量任务的。<br>近期在做一个hybird项目的UAT，代码里出现了前辈们的各种不同的css写法，我必须要全部看懂然后再做修改，也是很蛋疼，所以周末在图书馆对遇到的坑做个总结吧。</p></blockquote><span id="more"></span><h5 id="常用单位"><a href="#常用单位" class="headerlink" title="常用单位"></a>常用单位</h5><p><code>rem</code></p><blockquote><p>[MDN]This unit represents the font-size of the root element.<br>这个单位代表了根元素的字体大小。<br>如果在document里面有html元素，即为根元素，通过在html上设置font-size，则可以使用rem来表示字体大小或者用来定义元素的高度、宽度等等。</p></blockquote><p>下面是一段我写的简易媒体查询的代码，即通过css来实现自适应，font-size的取值最好为偶数，避免发生字体渲染问题。这里选用<code>10px</code>作为基础值是因为设计师以iphone6作为设计图标准，设计稿上宽度<code>750px</code>，iphone6实际宽度<code>375px</code>，这样手动rem换算只要<code>设计稿px/10/2</code>，很容易进行布局计算，其余的自适应完全交给浏览器去实现。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">361px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">10px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">400px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">500px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio</span>:X)&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的写法比较适合普遍性的适应，不能保证所有机器得到最精准的适配，而且当遇到对像素要求很高的设计师抠细节的时候，总不能给每个手机都做<code>media quary</code>吧，于是下面给出一段js实现的，通过获取屏幕实际可用区域控制<code>root</code>元素<code>font-size</code>大小的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> width = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span>;<br>  <span class="hljs-keyword">var</span> rate = width/<span class="hljs-number">375</span>;<br>  <span class="hljs-keyword">var</span> newFontSize = <span class="hljs-string">&#x27;font-size:&#x27;</span> + rate*<span class="hljs-number">10</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-property">style</span> = newFontSize;<br>&#125;());<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-property">style</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>你也可以<a href="http://guoningyan.com/demo/testrem.html">点击这里</a>，查看我的在线demo。</p><p><code>em</code></p><blockquote><p>[MDN]This unit represents the calculated font-size of the element. If used on the font-size property itself, it represents the inherited font-size of the element.<br>从元素进行font-size属性的继承，即获取父元素的字体大小进行设置。<br>通过在父元素上设置font-size，则可以使用em来表示字体大小或者用来定义子元素的高度、宽度等等。</p></blockquote><p><code>vw、vh</code></p><blockquote><p>[MDN]vw:1&#x2F;100th of the height of the viewport.<br>[MDN]vh:1&#x2F;100th of the width of the viewport.<br>[MDN]vmin:1&#x2F;100th of the minimum value between the height and the width of the viewport.<br>[MDN]vmax:1&#x2F;100th of the maximum value between the height and the width of the viewport.<br>vw、vh相对于屏幕的百分比，1vw是屏幕宽度的1%，1vh是屏幕高度的1%，由于屏幕是固定的，所以设置的百分比也是固定的。<br>要注意的是，如果带有弹出式键盘，则vh会自动改变，所以在需要调用设备原生键盘的时候，尽量不要使用vh</p></blockquote><h5 id="改变viewport"><a href="#改变viewport" class="headerlink" title="改变viewport"></a>改变viewport</h5><p>和用js改变html的font-size类似，也可以通过js来改变meta标签。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> width = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span>/<span class="hljs-number">320</span>;<br><span class="hljs-keyword">var</span> rate = width/<span class="hljs-number">375</span>,<br>    viewport = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;meta[name=viewport]&#x27;</span>);<br><br>viewport.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;content&#x27;</span>,<br>viewport.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;content&#x27;</span>)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(initial-scale)=[d.]?d/</span>,<span class="hljs-string">&#x27;$1=&#x27;</span>+rate))<br></code></pre></div></td></tr></table></figure><p><code>附录一</code>js常用获取屏幕信息</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">网页可见区域宽：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span><br>网页可见区域高：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br>网页可见区域高：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">offsetWidth</span>（包括边线的宽）<br>网页可见区域宽：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">offsetHeight</span>（包括边线的高）<br>网页正文全文宽：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollWidth</span><br>网页正文全文高：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">srcollHeight</span><br>网页被卷去的高：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span><br>网页被卷去的左：<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span><br>网页正文部分上：<span class="hljs-variable language_">window</span>.<span class="hljs-property">screenTop</span><br>网页正文部分左：<span class="hljs-variable language_">window</span>.<span class="hljs-property">screenLeft</span><br>屏幕分辨率的高：<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span><br>屏幕分辨率的宽：<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span><br>屏幕可用工作区高度：<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">availHeight</span><br>屏幕可用工作区宽度：<span class="hljs-variable language_">window</span>.<span class="hljs-property">srceen</span>.<span class="hljs-property">availWidth</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发了一个chrome外卖插件（1）</title>
    <link href="/2016/07/27/%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E4%B8%AAchrome%E5%A4%96%E5%8D%96%E6%8F%92%E4%BB%B6%EF%BC%881%EF%BC%89/"/>
    <url>/2016/07/27/%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E4%B8%AAchrome%E5%A4%96%E5%8D%96%E6%8F%92%E4%BB%B6%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天真是无聊啊，弄点神奇的东西玩玩儿，想了想，还没做过chrome插件呢，Google了一下，chrome插件基本就是使用html,css,js来实现一些浏览器的扩展功能，前端完全能胜任呐！<br>团队平时（特别是周五）经常会一起点奶茶水果之类，那就把这些做个整理，顺便了解一下如何做插件，一举两得！</p></blockquote><span id="more"></span><p><img src="/img/chrome1-1.png" alt="这里是配图"><br><code>这是插件root文件夹</code><br>需要包含manifest.json、icon.png(大小一般为19px * 19px)、index.html（设置的弹出页面）<br><code>manifest.json</code><br>manifest在英语里是清单的意思，顾名思义，这个文件是整个插件的描述文件，开发插件就得说明这个插件叫什么，可以用来干什么，以及自己设计的功能etc…<br><code>brower_action</code>是当鼠标悬浮或点击图标是的下拉列表，<code>page_action</code>是点击图标之后的弹出的页面，官方文档表示两者只能选其中一个或者都不选。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;takewayfood&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;takeway food for my friends&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;page_action&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default_icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eat.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_popup&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;index.html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Yummy!&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;takewayfood&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;takeway food for my friends&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;browser_action&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default_icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eat.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Yummy!&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p><code>安装</code><br>点击chrome浏览器右上角的“三”图标，进入设置，点击“扩展程序”，勾选“开发者模式”，点击“打包扩展程序”，选择插件所在目录，第一次上传时不需要选择“私有密钥文件”。<br>然后打开目录，发现多了两个文件，后缀名分别为crx和pem，pem即上面说到的“私有密钥文件”，当插件做了修改需要再次上传时，就需要选择这个pem文件作为“私有密钥文件”了。将crx文件拖入chrome浏览器中，即可完成插件安装。</p><p><code>顺便当个开发者吧</code><br>昨晚写的代码，居然今天就被chrome禁用了，所以决定申请一个chrome开发者账号。成为开发者需要一次性支付5美元，而在地区选择中是没有中国这个选项的（很墙大），所以我选择了香港这个选项，支付也需要符合地区的账户，查找之后发现可以在全球付（附录中有链接）开一个账户，但是需要支付100RMB，支付后剩余的钱可以提取到银行卡账户，还是很方便的。</p><p> <code>附录</code><br> <a href="https://developer.chrome.com/extensions/getstarted">chrome插件官方文档</a><br> <a href="https://www.globalcash.hk/">全球付</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular笔记（2）</title>
    <link href="/2016/07/25/angular%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    <url>/2016/07/25/angular%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇是对angular笔记（2）的补充篇，由于项目需要，增加了一些新功能，这篇主要有对表格排序的业务解决，同时也对如何在数据双向绑定的框架中添加插件有了一定实践。</p></blockquote><span id="more"></span><p><code>表格排序</code><br>用表格展示数据的时候经常会遇到一个需求就是“按照升降序排列”。<br><img src="/img/angular2-1.png" alt="效果图"></p><p>ng-table本身带有sortable属性，在new NgTableParams实例化过程中添加参数sorting，sorting中包含表格中需要排序的列名可以在前端实现排序功能使用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">sortable</span>=<span class="hljs-string">&quot;sortableId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$scope.<span class="hljs-property">tableParams</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NgTableParams</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-variable constant_">PAGESIZE</span>,<br>  <span class="hljs-attr">sorting</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;sortableId&#x27;</span>, &#125;<br>&#125;, &#123;<br>     <span class="hljs-attr">getData</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>     <span class="hljs-comment">//doSth...</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>但是很多时候这个已经封装好的排序功能不能满足自己的需求，比如已经数据已经实现了分页展示，每次请求都是带上当前页码的，所以不方便进行前端分页。此时需要后端完成排序，前端请求需要携带当前页码和排序参数，后端直接返回排序完成的数据给前端展示。</p><p>此时就需要自定义sort事件，在结合ng-table时也遇上了一些坑，下面通过代码来解释一下。<br>首先想到的是添加ng-click事件：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">sortable</span>=<span class="hljs-string">&quot;sortableId&quot;</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">&quot;sort(&#x27;sortParam&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这样做有一个误区，ng-table插件自定义的click事件会覆盖自定义事件，完全起不到作用。</p><p>修改为下面这样：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;colNmae&quot;</span> <span class="hljs-attr">bo-bind</span>=<span class="hljs-string">&quot;item.userIntegral&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sortable&quot;</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">&quot;sort(&#x27;sortParam&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此时放弃了使用插件自带的sortable，使用自定义的class&#x3D;’sortable’来显示出排序的上下箭头，结果是还是没有起作用。分析以后发现，此时的<td>标签实例化为表格的每一列，需求是在列名中添加点击事件实现排列，而普通的ng-click无法绑定进去。<br>chrome中DOM渲染出来的效果可以看到如下：<br><img src="/img/angular2-2.png" alt="效果图"></p><p>通过我们通过强制template注入的方式，将事件绑定在模板中的节点上，然后插入进表格。<br>修改为下面这样：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-header</span>=<span class="hljs-string">&quot;&#x27;insert.html&#x27;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span> <span class="hljs-attr">bo-bind</span>=<span class="hljs-string">&quot;item.userDan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/ng-template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert.html&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sortable&quot;</span> ng-click=<span class="hljs-string">&quot;sort(&#x27;sortParam&#x27;)&quot;</span> ng-<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;&#x27;sort-asc&#x27;: status == 1, &#x27;sort-desc&#x27;: status == -1 &#125;&quot;</span>&gt;</span><br><span class="language-javascript">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sort-indicator&quot;</span>&gt;</span>此列可以进行升降序排列<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="language-javascript">    &lt;/div&gt;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTableParams</span>(<span class="hljs-params"></span>) &#123;<br>  $scope.<span class="hljs-property">tableParams</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NgTableParams</span>(&#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-variable constant_">PAGESIZE</span><br>  &#125;, &#123;<br>      <span class="hljs-attr">getData</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>          <span class="hljs-keyword">var</span> pageIndex = params.<span class="hljs-title function_">page</span>();<br>          <span class="hljs-keyword">return</span> httpData.<span class="hljs-title function_">loadUserHealthScoreRank</span>(&#123;<br>              <span class="hljs-attr">pageIndex</span>: pageIndex,<br>              <span class="hljs-attr">pageSize</span>: <span class="hljs-variable constant_">PAGESIZE</span>,<br>              <span class="hljs-attr">sortFieldName</span>:$scope.<span class="hljs-property">sortFieldName</span>,<br>              <span class="hljs-attr">sortDesc</span>:$scope.<span class="hljs-property">sortDesc</span><br>          &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>              params.<span class="hljs-title function_">total</span>(response.<span class="hljs-property">totalNum</span>);<br>              $scope.<span class="hljs-property">tableCount</span> = response.<span class="hljs-property">totalNum</span>;<br>              <span class="hljs-keyword">return</span> response.<span class="hljs-property">list</span>;<br>          &#125;)<br>      &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">//排序</span><br>$scope.<span class="hljs-property">sort</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">type</span>) &#123;<br>  <span class="hljs-keyword">if</span>(type == <span class="hljs-string">&#x27;sortParam&#x27;</span>)&#123;<br>      $scope.<span class="hljs-property">sortFieldName</span> = <span class="hljs-string">&#x27;name&#x27;</span>;<br>      <span class="hljs-keyword">if</span>($scope.<span class="hljs-property">status</span> == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>          $scope.<span class="hljs-property">status</span> = <span class="hljs-string">&#x27;-1&#x27;</span>;<br>          $scope.<span class="hljs-property">sortDesc</span> = <span class="hljs-string">&#x27;asc&#x27;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($scope.<span class="hljs-property">moneystatus</span> == <span class="hljs-string">&#x27;-1&#x27;</span>)&#123;<br>          $scope.<span class="hljs-property">status</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>          $scope.<span class="hljs-property">sortDesc</span> = <span class="hljs-string">&#x27;desc&#x27;</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          $scope.<span class="hljs-property">status</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>          $scope.<span class="hljs-property">sortDesc</span> = <span class="hljs-string">&#x27;desc&#x27;</span>;<br>      &#125;<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>chrome中DOM渲染出来的效果可以看到如下：<br><img src="/img/angular2-3.png" alt="效果图"></p><p><code>表格爆栈</code><br>从后端获取json数据后匹配ng对象，进行模板填充，是使用ng的一般方法，有时候会出现如下错误：<br><img src="/img/angular2-4.png" alt="效果图"><br>翻译成中文就是：爆栈了…<br>查阅资料后发现，出现这个问题一般是进行了循环调用，即a调用b进行数据处理，同时b也调用了a，ng本身无法进行处理，只能报错。<br>而我出现这个问题的情况就比较诡异了，我在controller中初始化了一个对象，如下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$scope.<span class="hljs-property">search</span> = &#123;&#125;;<br>$scope.<span class="hljs-property">search</span>.<span class="hljs-property">rankType</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>当在表格参数中使用<code>$scope.search.rankType</code>时无法获取数据，报错就是爆栈了，后来经过<code>console.dir()</code>后发现<code>$scope.search</code>是拥有了众多方法的对象，自然循环起来就爆栈了，所以以后取名还得注意千万要避免ng自带的对象名。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭一个little project脚手架（2）整合测试</title>
    <link href="/2016/06/28/%E6%90%AD%E4%B8%80%E4%B8%AAlittle-project%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%882%EF%BC%89%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95/"/>
    <url>/2016/06/28/%E6%90%AD%E4%B8%80%E4%B8%AAlittle-project%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%882%EF%BC%89%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前文叙述了这个项目的搭建过程和理由，本文在这个工程中添加Jasmine+Karma测试，由于更新换代很快，在搭建这个脚手架的过程中走了好多坑，网上的很多解决方式在package更新后都不起作用，本文罗列了我在玩的过程中遇到的4个坑。</p></blockquote><span id="more"></span><p><code>Jasmine+Karma</code><br>Jasmine是BDD(行为驱动开发)框架，Karma是基于其的一个测试库。<br>Karma安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install karma -g<br></code></pre></div></td></tr></table></figure><p>Karma+Jasmine配置，根据提示完成配置项</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">karma init<br></code></pre></div></td></tr></table></figure><p>创建测试文件（符合jasmineAPI的测试脚本）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">decsribe(&quot;A suite of basic function&quot;,function() &#123;<br>  it(&quot;finish some function&quot;,function()&#123;<br>    except(&quot;result&quot;).toEqual(FuncName(&quot;params&quot;))<br>  &#125;);<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>修改配置文件karma.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">browsers</span>: [<span class="hljs-string">&#x27;Chrome&#x27;</span>, <span class="hljs-string">&#x27;Firefox&#x27;</span>],<br><span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-string">&#x27;karma-jasmine&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-chrome-launcher&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-firefox-launcher&#x27;</span><br>      ]<br></code></pre></div></td></tr></table></figure><h4 id="shell很大可能报错（1）"><a href="#shell很大可能报错（1）" class="headerlink" title="shell很大可能报错（1）"></a>shell很大可能报错（1）</h4><p><img src="/img/karma-error1.png" alt="karma start报错"><br>我已经在项目目录下运行了<code>npm install karma-chrome-launcher --save-dev</code> ，检查node_modules中也有了，还是显示上图错误。查阅了各种资源后，得出结论是因为我同时在全局和文件目录中安装了karma，默认启动了全局环境的karma，必须先卸载全局环境的karma，然后才能在文件目录中找到启动浏览器的插件。</p><h4 id="shell很大可能报错（2）"><a href="#shell很大可能报错（2）" class="headerlink" title="shell很大可能报错（2）"></a>shell很大可能报错（2）</h4><p>运行<code>karma start karma.conf.js</code>没有找到文件，原因是根目录下没有找到启动文件。解决方法是在<code>package.json</code>中的script中添加<code>&quot;test&quot;: &quot;node_modules/karma/bin/karma start karma.conf.js&quot;</code>，运行<code>npm run test</code>就可以进行测试了。</p><h4 id="shell很大可能报错（3）"><a href="#shell很大可能报错（3）" class="headerlink" title="shell很大可能报错（3）"></a>shell很大可能报错（3）</h4><p><img src="/img/karma-error2.png" alt="karma start报错"><br>这是因为karma直接打开了浏览器进行测试，目前浏览器对es6语法不是特别支持，特别是import关键字不支持，在文章（1） 中介绍了本项目使用了es6＋webpack构建，webpack完成了babel和解决了依赖问题，但是我们需要测试的是自己写的代码而不是打包后的代码，所以需要寻找新的办法。<br>我第一个项目是用babel，但是出现了上图的问题，原因是babel解决了es6编译的问题，但是处理不了依赖关系，所以需要新的方式进行操作。</p><h4 id="shell很大可能报错（4）"><a href="#shell很大可能报错（4）" class="headerlink" title="shell很大可能报错（4）"></a>shell很大可能报错（4）</h4><p><img src="/img/karma-error3.png" alt="karma start报错"><br> 出现上图错误基本是因为文件目录没有找到，需要在根目录下启动karma命令。</p><p>最后的配置文件karma.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">preprocessors</span>: &#123;<br> <span class="hljs-string">&#x27;../../*.js&#x27;</span>: [<span class="hljs-string">&#x27;webpack&#x27;</span>, <span class="hljs-string">&#x27;babel&#x27;</span>]<br>&#125;,<br><span class="hljs-attr">webpack</span>: &#123;<br>&#125;,<br><span class="hljs-attr">webpackMiddleware</span>: &#123;<br>   <span class="hljs-attr">noInfo</span>: <span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-attr">babelPreprocessor</span>: &#123;<br> <span class="hljs-attr">options</span>: &#123;<br>   <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;es2015&#x27;</span>],<br>   <span class="hljs-attr">sourceMap</span>: <span class="hljs-string">&#x27;inline&#x27;</span><br> &#125;,<br> <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>   <span class="hljs-keyword">return</span> file.<span class="hljs-property">originalPath</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.js$/</span>, <span class="hljs-string">&#x27;.es5.js&#x27;</span>);<br> &#125;,<br> <span class="hljs-attr">sourceFileName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>   <span class="hljs-keyword">return</span> file.<span class="hljs-property">originalPath</span>;<br> &#125;<br>&#125;,<br><span class="hljs-attr">browsers</span>: [<span class="hljs-string">&#x27;Chrome&#x27;</span>, <span class="hljs-string">&#x27;Firefox&#x27;</span>],<br><span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-string">&#x27;karma-jasmine&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-webpack&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-chrome-launcher&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-firefox-launcher&#x27;</span>,<br>      <span class="hljs-string">&#x27;karma-babel-preprocessor&#x27;</span><br>      ]<br></code></pre></div></td></tr></table></figure><p><code>附录</code><br><a href="http://blog.fens.me/nodejs-karma-jasmine/">Karma和Jasmine自动化单元测试</a><br><a href="https://karma-runner.github.io/latest/intro/configuration.html">karma文档</a><br><a href="https://github.com/babel/karma-babel-preprocessor">karma-babel-preprocessor</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭一个little-project脚手架（1）webpack+es6</title>
    <link href="/2016/06/22/%E6%90%AD%E4%B8%80%E4%B8%AAlittle-project%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%881%EF%BC%89webpack+es6/"/>
    <url>/2016/06/22/%E6%90%AD%E4%B8%80%E4%B8%AAlittle-project%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%881%EF%BC%89webpack+es6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章用于叙述这个项目的搭建过程和理由，用法比较简单，用es6进行代码书写（eslint代码检查），用babel编译，webpack打包，加入常用css库文件(eg:normalize.css)、js库文件(eg:fetch.js)，可选择BDD。若比较成功，后期将做成npm包使用。</p></blockquote><span id="more"></span><p><code>目录结构设置</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">- node_modules<br>- client - asserts(<span class="hljs-keyword">just </span>for images <span class="hljs-keyword">or </span>other resource like sounds <span class="hljs-keyword">or </span>movs)<br>         - components <br>            - page1.<span class="hljs-keyword">js(small </span>pros are <span class="hljs-keyword">just </span><span class="hljs-keyword">divided </span>into pages,<span class="hljs-keyword">or </span>exact <span class="hljs-keyword">divided </span>into slider,title)<br>            - page1.<span class="hljs-keyword">scss</span><br><span class="hljs-keyword"></span>         - public <br>            - <span class="hljs-keyword">scss </span><br>            - css<br>              - <span class="hljs-keyword">normalize.css</span><br><span class="hljs-keyword"></span>            - <span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>              - fetch.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>         - <span class="hljs-keyword">dist(release </span><span class="hljs-keyword">dictionary)</span><br><span class="hljs-keyword"></span>            - index.html<br>- package.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>- webpack.config.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>- .gitignore<br>- .eslintrc<br></code></pre></div></td></tr></table></figure><p><code>webpack</code><br>具体优势可以参考：<a href="http://zhaoda.net/webpack-handbook/what-is-webpack.html">webpack优势</a>，在本项目中主要是作为模块打包工具使用，通过自定义的方式将依赖树拆分成按需加载的块。<br>在项目根目录中使用<code>webpack.config.js</code>设置打包的文件目录，<code>dist</code>是最后需要提交的文件夹，所以将打包好的js文件命名为bundle.js保存到dist目录下，在index.html中引入。<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">webpack -w //启用监听模式，没有变化的模块编译后返回到内存中<br>webpack-dev-server  //默认启动在localhost:8080的服务<br></code></pre></div></td></tr></table></figure><p><code>fetch.js</code><br>目前引用了fetch.js来实现ajax请求，FetchAPI也可以使用，以后确定浏览器支持性可以完全替换。</p><p><code>附录</code><br><a href="https://github.com/ginny315/es6-proConstructor">本项目git地址</a><br><a href="http://www.cnblogs.com/qianlegeqian/p/4728170.html">配置eslint中文备注</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue1.0+es6+webpack脚手架搭建</title>
    <link href="/2016/05/02/vue1-0-es6-webpack%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <url>/2016/05/02/vue1-0-es6-webpack%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>终于es6学完了，过胖开始写demo，欧耶！学vue的时候恰好发布了2.0版本，着渐进增强的原则，本文先用1.0版本写demo，玩过之后再来一发2.0。<br>本篇属于webpack、vue语法基础篇，只要肯走坑，框架搭起来不是问题。</p></blockquote><span id="more"></span><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>vue语法不是浏览器原生支持的，所以需要做依赖管理和打包<br>loader机制支持载入各种静态资源（把所有非js资源转换成js，url-loader、css&#x2F;style-loader）<br>plugin机制对整个流程进行一定的控制</p></blockquote><p><code>安装</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g webpack<br>//项目文件夹下<br>npm init<br>npm install webpack --save-dev //只需要在生产环境使用<br></code></pre></div></td></tr></table></figure><p><code>配置</code><br>webpack使用起来本质就是做一个配置(webpack.config.js)<br>这里给出了安装相应加载器的配置：<br>加载器需要先安装，然后才能运行webpack指令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save xxx-loader <br></code></pre></div></td></tr></table></figure><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./main.js&#x27;</span>, <span class="hljs-comment">//入口文件</span><br>  <span class="hljs-attr">output</span>: &#123; <span class="hljs-comment">//输出</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dist&#x27;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>  &#125;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">loaders</span>: [&#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <br>      <span class="hljs-attr">loader</span>:<span class="hljs-string">&quot;style-loader!css-loader&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>, <br>      <span class="hljs-attr">loader</span>:<span class="hljs-string">&quot;url-loader&quot;</span><br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">limit</span>: <span class="hljs-number">1000</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js[x]?$/</span>, <br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>      <span class="hljs-attr">query</span>: &#123;<br>        <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;es2015&#x27;</span>],<br>        <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&#x27;transform-runtime&#x27;</span>]<br>      &#125;<br>    &#125;]<br>  &#125;<br>  <span class="hljs-attr">resolve</span>: &#123; <span class="hljs-comment">//搜索默认路径</span><br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-attr">js</span>: path.<span class="hljs-title function_">join</span>(__dirname,<span class="hljs-string">&quot;&quot;</span>),<br>      <span class="hljs-attr">src</span>: path.<span class="hljs-title function_">join</span>(__dirname,<span class="hljs-string">&quot;&quot;</span>)<br>    &#125;,<br>    <span class="hljs-attr">root</span>: [<br>      path.<span class="hljs-title function_">join</span>(__dirname,<span class="hljs-string">&quot;&quot;</span>)<br>    ],<br>    <span class="hljs-attr">modulesDirectories</span>: [<span class="hljs-string">&#x27;node_modules&#x27;</span>]<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>entry表示输入，output表示输出<br>&#x2F;.css$&#x2F;匹配xx.css文件，&#x2F;.css&#x2F;匹配xx.css以及xx.css.zip文件<br>?aa&#x3D;bb，表示将aa设置为bb<br>webpack优先搜索root目录，再搜索modulesDirectories</p></blockquote><p><code>启动</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">webpack<br></code></pre></div></td></tr></table></figure><p>此时文件被打包到dist目录下，新建index.html默认入口文件，index.html中引入bundle.js文件，此时的dist文件夹就是打包后的目录文件夹。</p><p><code>文件分离按需加载</code><br>require.ensure会产生额外的boundle，按具体情况进行配置。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&quot;jquery&quot;</span>,<span class="hljs-string">&quot;imgScrll&quot;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span></span>)&#123;<br>  <span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jquery&quot;</span>);<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;imgScroll&quot;</span>);<br>  $(<span class="hljs-string">&quot;#container&quot;</span>).<span class="hljs-title function_">scroll</span>(&#123; <br>    <span class="hljs-comment">//do sth</span><br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><code>其他命令</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">webpack -p //uglify<br>webpack -w //watch <br></code></pre></div></td></tr></table></figure><h4 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h4><p>vue-loader是vue作者提供的加载器。<br>teplate-name有多种，这里使用webpack相关标准来定制。<br>init时需要按照要求输入文件相关，官方提供了几个模板，支持ESLint以及Mocha（依赖包略多，有点担心升级麻烦）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g vue-cli<br>vue init &lt;template-name&gt; &lt;project-name&gt;<br></code></pre></div></td></tr></table></figure><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p><code>demo01</code>简单形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> <span class="hljs-attr">v-attr</span>=<span class="hljs-string">&quot;src:url&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ginny&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://guoningyan.com/test.png&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>思考</code></p><blockquote><p>“如果想绑定的特性是像 img[src] 这样的不能在 html 中随意初始化的 (可能默认会产生预期外的网络请求)，没关系，有 v-attr&#x3D;”src: url” 这样的写法，把被绑定的数据里的 url 同步过来。”（引用自勾三股四的blog）<br>之前写过同样是 MVVM 框架的 angular ，数据绑定写法类似，用的是ng-src&#x3D;””，使用过程中没有发现上面的问题，这点以后研究一下再补上。</p></blockquote><p><code>demo02</code>xx.vue格式<br>这种格式将模板（jade etc..）、样式（css、sass etc..）、脚本（es6 etc..）集合成一整个文件，每个文件是一个组件，预编译文件使用lang说明文件格式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">other-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">other-component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">OtherComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/other-component.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> testDemo = &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">OtherComponent</span> &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;test&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> testDemo;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用vue-loader进行预编译打包</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm run dev<br></code></pre></div></td></tr></table></figure><p><code>目录结构</code><br>以下的写法皆是使用webpack模板后的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">- build<br>- node_moudles<br>- src<br>- assets<br>- components (每个组件对应.vue文件 )<br>- App.vue (主vue)<br>- main.js<br>- static<br>- test<br>- .babelrc //babel配置<br>- eslintrc //eslint配置，建议使用airborb<br>- config.js //生产建构路径<br>- gulpfile.js //gulp监听<br>- index.html //启动后的首页<br>- package.json <br></code></pre></div></td></tr></table></figure><p>先将组件写在components中，每个.vue文件对应一个组件，然后通过打包工具集成。gulpfile文件配件见附录勾三股四的博客。</p><p><code>附录</code>参考资料<br><a href="https://github.com/ruanyf/webpack-demos#demo01-entry-file-source">阮老师的webpack很好上手</a><br><a href="https://github.com/yesvods/Blog/issues/2">git上某个webpack简明教程</a><br><a href="http://jiongks.name/blog/just-vue/">vue+webpack 勾三股四的blog</a><br><a href="https://www.npmjs.com/package/vue-loader">vue-loader</a><br><a href="http://eslint.org/">eslint</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>javascript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6备忘</title>
    <link href="/2016/05/01/ES6%E5%A4%87%E5%BF%98/"/>
    <url>/2016/05/01/ES6%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<p>花了一个礼拜时间学习了ES6，本文记录了一些常用关键语法备忘。这篇内容比较简单，对于Promise及异步操作之类的本文暂且略过，将在后续实践中展开。</p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><ul><li>块级作用域（构成块级的大括号不能少）有效，声明后不管全局中有没有，都会形成一个封闭作用域</li><li>不存在变量提升，使用前需要先声明（注意函数声明，在块级作用域中声明的函数只有在此块级中可以使用）</li><li>不允许在相同作用域内，重复声明同一个变量</li></ul><span id="more"></span><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul><li>声明的是常量（声明时必须初始化）</li><li>块级作用域有效</li><li>复合类型时指向数据所在地址（注意将对象设置为const时不能改变其属性的值；将数组设置为const时不能将另一个数组赋值给它，可以在当前数组中对数组元素作操作）</li><li>跨模块常量  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//moduleA.js</span><br><span class="hljs-built_in">exports</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AA</span> = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">exports</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BB</span> = <span class="hljs-number">456</span>;<br><br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> moduleA form <span class="hljs-string">&#x27;./moduleA&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moduleA.<span class="hljs-property">AA</span>);<span class="hljs-comment">//123</span><br><span class="hljs-comment">//another way</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-variable constant_">AA</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./moduleA&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">AA</span>);<span class="hljs-comment">//123</span><br></code></pre></div></td></tr></table></figure><blockquote><p>ES6中，有6种声明变量的方法;<br>var、function声明的全局变量是全局对象的属性;<br>let、const、class声明的全局变量不属于全局对象的属性</p></blockquote></li></ul><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><ul><li>新的（Boolean,String,Number,Object,null,undefined之外的第七种）原始数据类型，表示独一无二的值</li><li>不是对象，不能添加属性，不能new，可以加参数，可以显示转为字符串，布尔值，但是不能转为数值   <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>s <span class="hljs-comment">//Symbol(foo)</span><br>s.<span class="hljs-property">toString</span> <span class="hljs-comment">//&quot;Symbol(foo)&quot;</span><br></code></pre></div></td></tr></table></figure></li><li>每一个Symbol值都是不相等的，可以作为标志符，用于对象的属性名（不能用点运算符），能保证不会出现同名的属性   <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> test = &#123;<br>  [<span class="hljs-title class_">Symbol</span>()]:<span class="hljs-string">&#x27;test&#x27;</span><br>&#125;<br>test[<span class="hljs-title class_">Symbol</span>()] <span class="hljs-comment">//test</span><br></code></pre></div></td></tr></table></figure></li><li>通过Object.getOwnPropertySymbols()获取，返回一个数组</li><li>Symbol.for()为Symbol值登记的名字。使用同一个Symbol值</li></ul><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>从数组或对象中提取值（解构），然后按照层级对应位置进行赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//Array</span><br><span class="hljs-keyword">let</span> [a,[b],c = <span class="hljs-number">0</span>,d = <span class="hljs-number">33</span>,e,f,g] = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>],<span class="hljs-number">3</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-literal">null</span>];<span class="hljs-comment">//a=1,b=2,c=3,d=33,e=null,g=undefined</span><br><span class="hljs-keyword">let</span> [d,e] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]);<span class="hljs-comment">//d=4,e=5</span><br><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>,y = <span class="hljs-number">2</span>] = [<span class="hljs-number">2</span>];<span class="hljs-comment">//x=2,y=2</span><br>[x,y] = [y,x];<span class="hljs-comment">//交换变量的值</span><br><br><span class="hljs-comment">//Object</span><br><span class="hljs-keyword">let</span> &#123;a,b&#125; = &#123;<span class="hljs-attr">b</span>:<span class="hljs-number">11</span>,<span class="hljs-attr">a</span>:<span class="hljs-number">22</span>&#125;;<span class="hljs-comment">//a=22,b=11</span><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">y</span>:x&#125; = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">111</span>&#125;;<span class="hljs-comment">//y=111,x=undefined</span><br>(&#123;x&#125; = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//()避免js引擎将&#123;&#125;理解为一个代码块，可能导致歧义，尽量不用;</span><br><span class="hljs-keyword">let</span> &#123; log, sin, cos &#125; = <span class="hljs-title class_">Math</span>;<br><br><span class="hljs-comment">//String(转化为类数组对象)</span><br><span class="hljs-keyword">const</span> [a,b] = <span class="hljs-string">&#x27;hi&#x27;</span>;<span class="hljs-comment">//a=&#x27;h&#x27;,b=&#x27;i&#x27;</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">length</span>:a&#125; = <span class="hljs-string">&#x27;hi&#x27;</span><span class="hljs-comment">//a=2</span><br><br><span class="hljs-comment">//function</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x=<span class="hljs-number">0</span>,y=<span class="hljs-number">9</span>]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><span class="hljs-title function_">add</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]);<span class="hljs-comment">//3</span><br><span class="hljs-title function_">add</span>([]);<span class="hljs-comment">//9</span><br></code></pre></div></td></tr></table></figure><blockquote><p>等号右边必须是可遍历的结构;<br>undefined !&#x3D;&#x3D; null，只有&#x3D;&#x3D;&#x3D;undefined的变量为undefined，其余情况均为其值;<br>对象结构的内部机制，先找到同名属性，再复制给对应的变量，对应的变量获得赋值的结果，同名属性（理解为模式，非变量）并没有获得赋值;<br>可以将现有对象的方法赋值到某个变量;<br>若等号右边为Number和Boolean，则先转为对象;</p></blockquote><h4 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h4><p>模板字符串（运行效率较慢）</p><blockquote><p>模板字符串表示多行字符串，空格和tab保留<br>静态字符串一律使用单引号或反引号，不使用双引号<br>动态字符串使用反引号。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`link<span class="hljs-subst">$&#123;A.linkText&#125;</span><span class="hljs-subst">$&#123;A.otherProp&#125;</span>`</span>;<br><span class="hljs-string">`<span class="hljs-subst">$&#123;a&#125;</span> + <span class="hljs-subst">$&#123;b&#125;</span> = <span class="hljs-subst">$&#123;a+b&#125;</span>`</span>;<br></code></pre></div></td></tr></table></figure><h4 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h4><ul><li>RegExp构造函数参数改变 <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/abc/ig</span>,<span class="hljs-string">&#x27;i&#x27;</span>);<span class="hljs-comment">//等同于new RegExp(&#x27;abc&#x27;,&#x27;i&#x27;)</span><br></code></pre></div></td></tr></table></figure></li><li>字符串对象的正则方法（match、replace、search、split）全部调用RegExp的实力方法</li><li>u修饰符代表Unicode模式</li><li>&#x2F;\u{BBB30}&#x2F;u，{}表示Unicode字符</li><li>y修饰符表示全局模式（区别于g修饰符，y只能从剩余的第一个位置开始）</li></ul><h4 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h4><ul><li>减少全局性方法，使语言逐步模块化<ul><li>Number.isFinite()，是否非正无穷</li><li>Number.isNaN()</li><li>Number.parseInt(),Number.parseFloat()</li></ul></li><li>Number.isInteger()，是否为整数（整数浮点数存储方法相同）</li></ul><h4 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h4><ul><li>Array.from(arr,item &#x3D;&gt; item*item)将类数组对象（有length属性）和可遍历的对象转为真正的数组，第二个参数用法类似于map</li><li>[…arguments]将一些数据结构转为数组</li><li>Array.of(arg0,arg1)将一组值转换为数组</li><li>空位转为undefined</li></ul><h4 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h4><ul><li>参数声明变量默认值之后，不能用let,const再次声明</li><li>解构赋值时，传参数据类型相对应</li><li>参数先对应默认值（运行时执行，默认值设置为undefined表明可以省略），然后解构赋值生效</li><li>rest参数将多余参数放入数组中，之后不能有其他参数。</li><li>有iterator接口的类数组对象可以使用扩展运算符，没有此接口使用Array.from转为真正的数组</li><li>箭头函数，this指向定义时的对象（外层代码块this），不可以作为构造函数（本身没有this），不可以使用arguments（用rest），不能作为Generator函数。  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = param =&gt; returnParam<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1,num2</span>) =&gt; &#123;<span class="hljs-keyword">return</span> num1+num2;&#125;<br></code></pre></div></td></tr></table></figure></li><li>使用尾递归（严格模式），防止栈溢出</li></ul><h4 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h4><ul><li>属性、方法简写（Generator函数加＊）</li><li>name作为对象名、方法名（get、set、bound、anonymous、Symbol的描述）</li><li>Object.is()，同值相等（针对＋1-1，NaN）</li><li>Object.assign(target,source1,source2)浅拷贝，只拷贝源对象的自身属性（不拷贝继承属性和不可枚举属性），遇到同名属性替换<br><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//浅克隆</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">origin</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,origin);<br>&#125;<br><span class="hljs-comment">//深克隆</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">origin</span>) &#123;<br><span class="hljs-keyword">let</span> originProto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(origin);<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(originProto),origin);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>Object.setPrototypeOf(target,origin)设置原型对象</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><ul><li>为不同的数据结构提供统一的访问机制，有Iterator接口（数组、类数组对象String etc..、Set、Map原生具有）就能完成遍历操作。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewIterator</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;&#125;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; <br>  &#125;<br> &#125;<br> <span class="hljs-comment">//类数组对象调用数组的Iterator方法</span><br> <span class="hljs-title class_">ArrLike</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>];<br></code></pre></div></td></tr></table></figure></li><li>具有Iterator接口的数据结构，通过[…arg]或者Array.from(arrayLike)转为数组</li></ul><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><ul><li>Generator函数封装了多个内部的状态</li><li>函数返回一个迭代器对象，可以依次遍历Generator函数内部的每一个状态。也是一个iterator对象生成函数</li><li>只有调用next方法才会执行<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title class_">GenDemo</span>() &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;firstState&quot;</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;secondState&quot;</span>;<br>  <span class="hljs-keyword">yield</span>* <span class="hljs-string">&quot;divideStr&quot;</span>; <span class="hljs-comment">//相当于for(var value of &quot;divideStr&quot;)</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>遇到yield暂停执行后面的操作，返回紧跟语句后表达式的值</li><li>next()继续执行，return()返回给定的值并终结函数执行，若有finally,return推迟到finally代码块执行完再执行</li></ul><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><ul><li>等同于构造函数，类内部定义的方法不可枚举 <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">x,y</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>&#125;<br><span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title function_">toValue</span>(<span class="hljs-params"></span>) &#123;&#125;<br>[methodName]()&#123;&#125;<br>state = &#123;<span class="hljs-comment">//实例属性</span><br>  <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>可以立刻执行<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">class</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;(<span class="hljs-string">&#x27;立刻执行参数&#x27;</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a.sayName();//立刻执行参数<br></code></pre></div></td></tr></table></figure></li><li>不存在变量提升</li><li>类和模块的内部，默认就是严格模式</li><li>类的继承（先创造父类的实例对象this，然后再通过调用super方法，用子类的构造函数修改this）  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Parent</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x,y,color</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(x,y);<span class="hljs-comment">//父类的构造函数，用来新建父类的this对象，子类继承父类的this对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>  &#125;<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>+<span class="hljs-string">&#x27;&#x27;</span>+<span class="hljs-variable language_">super</span>.<span class="hljs-title function_">toString</span>();<span class="hljs-comment">//通过super可以引用父类实例的属性和方法，也可以引用父类的静态方法</span><br>  &#125;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property">_proto</span> === parent;<span class="hljs-comment">//true</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_proto_</span> === <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<span class="hljs-comment">//true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-title class_">Child</span>) === <span class="hljs-title class_">Parent</span>;<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure></li><li>class内部只有静态方法，没有静态属性（babel已经支持，可用）</li><li>new.target查看构造函数（子类继承父类时返回子类）</li></ul><p>在继承这块ES6与ES5区别</p><blockquote><p>ES6通过引入class，让javascript引擎去实现原来需要我们自己编写的代码<br>ES5中需要通过中间对象继承，ES6中直接通过extents实现<br>ES5通过在原型链上添加方法，代码比较分散。ES6直接将方法写在类中<br>ES5原生构造函数无法继承（子类无法获得构造函数的内部属性），ES6允许继承构造函数定义子类-<br>ES5先创造子类的实例对象this，再将父类的方法添加到this上面，ES6先创建父类的实例对象this（必须先调用super方法），然后再用子类的构造函数修改this</p></blockquote><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><ul><li>解决模块化问题，import加载，{}中的变量名必须与被导入模块对外接口的名称相同，import命令具有提升效果。</li><li>exports输出（必须是对外的接口，可以通过该接口取到模块内部实时的值），as重命名输出，可以用不同的名字输出多次。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;stat,exists,readFile&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span>;<span class="hljs-comment">//编译时加载</span><br><span class="hljs-keyword">import</span> &#123;originName <span class="hljs-keyword">as</span> newName&#125; form <span class="hljs-string">&#x27;./test&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">export</span> &#123;<br>  v1 <span class="hljs-keyword">as</span> mod1,<br>  v2 <span class="hljs-keyword">as</span> mod2,<br>  v2 <span class="hljs-keyword">as</span> mod22<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>通过指定默认输出，黑盒模块名（一个模块只能有一个默认输出）<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//A.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> aaa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./A.js&#x27;</span><br><span class="hljs-title function_">aaa</span>();<br></code></pre></div></td></tr></table></figure></li><li>模块输出实质是输出值的引用（commonjs输出值的拷贝），运用时访问模块取值，不会缓存。export接口输出对象实例时，任意import都是针对同一个对象实例操作。</li><li>es6 module transpiler（转成CommonJS或者AMD）<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install -g es6-<span class="hljs-variable language_">module</span>-transpiler<br>compile-modules convert file1.<span class="hljs-property">js</span> file2.<span class="hljs-property">js</span><br>compile-modules convert -o newName.<span class="hljs-property">js</span> originName.<span class="hljs-property">js</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="ESLint与Airbnb语法规则"><a href="#ESLint与Airbnb语法规则" class="headerlink" title="ESLint与Airbnb语法规则"></a>ESLint与Airbnb语法规则</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g eslint<br>npm install -g eslint-config-airbnb<br></code></pre></div></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//.eslintrc</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eslint-config-airbnb&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">eslint index.js<br></code></pre></div></td></tr></table></figure><p><code>附录一</code>学习资料<br><a href="http://es6.ruanyifeng.com/#docs">阮老师的ECMAScript入门</a><br><a href="https://github.com/airbnb/javascript">airbnb编码规范</a><br><a href="http://v.youku.com/v_show/id_XMTU0NTk3NjY0MA==.html">ECMAScript6 开发体系实践</a><br><a href="http://www.liaoxuefeng.com/">廖雪峰的官方网站－原型继承、class继承</a><br><a href="https://babeljs.io/">babel</a></p><p><code>附录二</code> 现有选型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">gulp+webpack+gulp-babel+es6<br>fis3+fis3-paser-babel+es6<br>react+webpack+es6<br>typescript+vscode+es6+ts transform<br></code></pre></div></td></tr></table></figure><p><code>附录三</code>环境配置</p><ul><li><p>npm安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save-dev babel-cli<br>npm install --save-dev babel-polyfill<br></code></pre></div></td></tr></table></figure></li><li><p>创建一个.babelrc</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&#123;<br>  presets:[<br>    <span class="hljs-string">&quot;es2015&quot;</span>,<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​  ​</p><p>​</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一小段js代码的思考（1）</title>
    <link href="/2016/04/14/%E4%B8%80%E5%B0%8F%E6%AE%B5js%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%881%EF%BC%89/"/>
    <url>/2016/04/14/%E4%B8%80%E5%B0%8F%E6%AE%B5js%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天随手写了一段代码，被<a href="http://www.w3ctech.com/user/4434">@流浪大法师</a>吐槽了，于是整理出了关于一个比较友善的写法以及在这段代码中的思考。<br>本篇有一点js trick在里面，也有模块化、函数科里化的一些写法。</p></blockquote><span id="more"></span><p>先看下面的糟糕的<code>第一段代码</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test  = (<span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner-arg0=&quot;</span>+arg0);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;return-arg0=&quot;</span>+arg0)<br>  &#125;<br>&#125;)();<br></code></pre></div></td></tr></table></figure><p>这里我犯了一个错误，我习惯性地将函数最外层用括号包起来使其立即执行，这是声明式的用法，在这里运用错误。函数有两种形式，表达式和声明式，函数表达式本身可以立即执行。</p><p><code>第二段代码</code>修改了一下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> test2 = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner-arg0=&quot;</span>+arg0);<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;return-arg0=&quot;</span>+arg0)<br>    &#125;<br>&#125;();<br></code></pre></div></td></tr></table></figure><p>去掉最外层括号之后本段代码也立即执行了。<br>若要让声明式立即执行，需要加一些小技巧。</p><p><code>最常见的写法</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//这里的代码立即执行</span><br>&#125;)()<br></code></pre></div></td></tr></table></figure><p><code>奇特的写法</code>：<br>赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，这个不是函数声明，它是个函数表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;aaa&quot;</span>)&#125;<span class="hljs-comment">//可以使用+-~void new delete</span><br></code></pre></div></td></tr></table></figure><p>在chrome中的执行结果如下：<br><img src="/img/js1-code1.png" alt="exection code result show one"><br>截图中可以看出，inner部分直接执行了，调用test()的时候return的匿名函数执行了。<br>因为之前写别的语言的缘故，习惯在函数的起始位置就传参，由于本段代码是立即执行的，所以第一次传参并没有起作用，后续的函数调用根本就没有调用到，这种写法真是太糟糕了。</p><p>以下是<code>第三段代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test3 = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner-arg0=&quot;</span>+arg0);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">arg1</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;return-arg1=&quot;</span>+arg1)<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在chrome中的执行结果如下：<br><img src="/img/js1-code2.png" alt="exection code result show two"><br>这里放弃了立即执行，采用需要时调用的方式。<br>第一次调用函数表达式，第二次调用返回的匿名函数，根据调用次序的不同，可以满足不同的业务需求。<br>第一次调用时，传参进行初始化，参数在函数作用域中声明，当函数执行完毕之后，被gc掉（属于标记清除）。<br>第二次调用使用的是返回的函数，这里是一个闭包，注意执行的时候要谨慎，不要轻易赋值给全局变量，内存泄漏你们都懂。</p><p><code>第四段代码</code>是高阶函数的写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//code4-1</span><br><span class="hljs-keyword">var</span> funcA = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>  <span class="hljs-comment">//funcA do sth</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">f,<span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-comment">//if need funcA</span><br>  f.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>);<br>&#125;<br><span class="hljs-title function_">main</span>(funcA,<span class="hljs-number">123</span>);<br><br><span class="hljs-comment">//code4-2</span><br><span class="hljs-keyword">var</span> funcB = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//funB do sth</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">arguments</span>-retB</span>)&#123;<br>    <span class="hljs-comment">//funB return sth</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">f,<span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-comment">//main return</span><br>  &#125;<br>&#125;<br><span class="hljs-title function_">main</span>()(funcB,<span class="hljs-number">123</span>);<br></code></pre></div></td></tr></table></figure><p>code4-1是标准的高阶函数调用，在需要的时候将函数作为参数传入，code4-2通过返回匿名函数的方式传参。在这里优势不明显，研究完继续填坑。</p><p>接下来看<code>第五段代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//moduleC</span><br><span class="hljs-title function_">define</span>([],<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = &#123;&#125;;<br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">func</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;moduleC-arg0=&quot;</span>+arg0)<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">exports</span>;<br>&#125;);<br><br><span class="hljs-comment">//module-main</span><br><span class="hljs-built_in">require</span>([moduleC],<span class="hljs-keyword">function</span>(<span class="hljs-params">moduleC</span>)&#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = &#123;&#125;;<br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;transToC-arg0=&quot;</span>+arg0)<br>  &#125;;<br>  <span class="hljs-built_in">exports</span>.<span class="hljs-title function_">otherFunc</span>(<span class="hljs-params"></span>)&#123;<br>    moduleC.<span class="hljs-title function_">func</span>(<span class="hljs-string">&#x27;module-main-arg1&#x27;</span>);<br>  &#125;<br>  expots.<span class="hljs-title function_">init</span>(<span class="hljs-number">555</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">exports</span>;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>这是commonjs的写法，这样写也为了函数解耦，个人觉得将函数绑定到对象的属性属于面向对象编程，和前面的说明式编程思想是不一样的。</p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">批注：［<span class="hljs-number">2016</span>-<span class="hljs-number">4</span>-<span class="hljs-number">17</span>修正］</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">今天吃饭的时候和<span class="hljs-variable constant_">WD</span>大神讨论了这个问题，我这里的理解有误，更正一下。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">javascript本身没有类的概念，<span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;&#125;作为“类”来使用的时候可以在原型链上添加方法，</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">但是只有当其<span class="hljs-keyword">new</span>一个对象实例时，才算是这个<span class="hljs-keyword">function</span>达到了“类”的作用；</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">只是将方法绑定在<span class="hljs-keyword">function</span> A属性上，通过<span class="hljs-keyword">function</span> A调用不能算是面相对象编程。</span><br></code></pre></div></td></tr></table></figure><p>还有<code>第六段代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-comment">//moduleA.js</span><br> <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">funcA1</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">arg0</span>)&#123;<br>       <span class="hljs-comment">//do funcA1</span><br>     &#125;<br>     <span class="hljs-attr">funcA2</span>:<span class="hljs-title function_">functioin</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-comment">//do funcA2</span><br>     &#125;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-built_in">exports</span>;<br><br><span class="hljs-comment">//moduleB.js</span><br><span class="hljs-keyword">var</span> A = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./muduleA&quot;</span>)();<span class="hljs-comment">//pay attention</span><br>A.<span class="hljs-title function_">funcA1</span>(<span class="hljs-number">123</span>);<br>A.<span class="hljs-title function_">funcA2</span>();<br></code></pre></div></td></tr></table></figure><p><code>pay attention</code>这种写法在nodejs中非常常见，这样写更符合事件触发机制，适用于将函数的执行作为参数传入，表示事件的传入，而事件发生时传参执行。<br>moduleA返回了函数对象，函数对象的属性的值是匿名函数，在moduleB中require了moduleA的返回函数，当需要使用moduleA的方法时，可以通过对象的键值调用。</p><p><code>思考</code>：<br>本文通过执行调用的顺序，结合以前写代码的习惯，讨论了javascript书写方式，若实践中得到更好的方式本文将持续修改。</p><p><code>附录</code>：<br><a href="https://www.zhihu.com/question/28292740">知乎上关于函数式编程的讨论</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js神奇的写法</title>
    <link href="/2016/04/12/js%E7%A5%9E%E5%A5%87%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <url>/2016/04/12/js%E7%A5%9E%E5%A5%87%E7%9A%84%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇总结了实践中用到的一些js trick，有些并非作者原创，但是作者都亲身坐过实验，效果奇佳。</p></blockquote><span id="more"></span><h5 id="数组浅复制"><a href="#数组浅复制" class="headerlink" title="数组浅复制"></a>数组浅复制</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">newArr = oldArr.<span class="hljs-title function_">concat</span>([]);<br>newArr = oldArr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>);<br></code></pre></div></td></tr></table></figure><h5 id="Function直接执行"><a href="#Function直接执行" class="headerlink" title="Function直接执行"></a>Function直接执行</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;alert(&quot;hello&quot;)&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/.+/</span>,<span class="hljs-built_in">eval</span>); <br><span class="hljs-string">&#x27;alert(&quot;hello&quot;)&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/.+/</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">m</span>)&#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(m)(); <br> &#125;);<br></code></pre></div></td></tr></table></figure><p>new Function(arg1,arg2,…argN,’body’)();<br>参数都是字符串类型，字符串里面的内容是js表达式。只有一个参数时，将该字符串里面的内容作为函数体的原生js代码执行，相当于eval;<br>&#x2F;.+&#x2F;匹配的是除回车之外的字符;<br>string.replace(regexp,replacement),replacement可以是function，作用于每个匹配到的字符</p><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; <span class="hljs-built_in">eval</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">101</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;alert(++i);&#x27;</span>));<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">101</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;alert(++i);&#x27;</span>))();<br></code></pre></div></td></tr></table></figure><p>通过new Array(n)我们可以创建n个空元素，n个空元素之间存在n-1个空白，通过arr.join()可以在空白中放一些东西组成我们需要的字符串</p><h5 id="浏览器变成编辑器"><a href="#浏览器变成编辑器" class="headerlink" title="浏览器变成编辑器"></a>浏览器变成编辑器</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//浏览器地址栏输入</span><br><span class="hljs-attr">data</span>:text/html,<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">contenteditable</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="文档可编辑"><a href="#文档可编辑" class="headerlink" title="文档可编辑"></a>文档可编辑</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//console输入</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">contentEditable</span> = <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></div></td></tr></table></figure><h5 id="整数的操作"><a href="#整数的操作" class="headerlink" title="整数的操作"></a>整数的操作</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = (<span class="hljs-number">12.4</span> / <span class="hljs-number">4.13</span>) | <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> foo2 = ~~(<span class="hljs-number">12.4</span> / <span class="hljs-number">4.13</span>)<br></code></pre></div></td></tr></table></figure><h5 id="将值很快转为bool"><a href="#将值很快转为bool" class="headerlink" title="将值很快转为bool"></a>将值很快转为bool</h5><figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">!!windoww === true;<br></code></pre></div></td></tr></table></figure><h5 id="函数的返回"><a href="#函数的返回" class="headerlink" title="函数的返回"></a>函数的返回</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//无返回值，默认为undefined，!undefined ＝ true</span><br>!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;aaa&quot;</span>)&#125;)() <span class="hljs-comment">//true</span><br>!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;aaa&quot;</span>)&#125;())<span class="hljs-comment">//true</span><br><span class="hljs-number">1</span> &amp;&amp; <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;()<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信SDK开发</title>
    <link href="/2016/04/10/%E5%BE%AE%E4%BF%A1SDK%E5%BC%80%E5%8F%91/"/>
    <url>/2016/04/10/%E5%BE%AE%E4%BF%A1SDK%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇是3月做的基于微信公众号开发的总结。<br>有微信SDK的讲解以及我所走过的坑。还有调试实践和比较好的书写方法。</p></blockquote><span id="more"></span><p><code>步骤一</code>：绑定域名<br>通过微信公众平台登录后，可以设置公众号的“js接口安全域名”</p><p><code>步骤二</code>：引入js文件<br>在引用接口的页面引入</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">http</span>:<span class="hljs-comment">//res.wx.qq.com/open/js/jweixin-1.0.0.js</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>require方式引入</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>.<span class="hljs-title function_">config</span>(&#123;<br>  <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;scripts/&#x27;</span>,<br>  <span class="hljs-attr">paths</span>:&#123;<br>    <span class="hljs-string">&#x27;wx&#x27;</span>:<span class="hljs-string">&#x27;http://res.wx.qq.com/open/js/jweixin-1.0.0&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><code>步骤三</code>：通过config接口注入权限验证配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">config</span>(&#123;<br>    <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br>    <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，公众号的唯一标识</span><br>    <span class="hljs-attr">timestamp</span>: , <span class="hljs-comment">// 必填，生成签名的时间戳</span><br>    <span class="hljs-attr">nonceStr</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，生成签名的随机串</span><br>    <span class="hljs-attr">signature</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 必填，签名，见附录1</span><br>    <span class="hljs-attr">jsApiList</span>: [] <span class="hljs-comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>注意</code>发布的时候一定记住把debug模式去掉</p><p> <code>步骤四</code>：通过ready接口处理成功的验证</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//获取“分享到朋友圈”按钮点击状态及自定义分享内容接口</span><br>  wx.<span class="hljs-title function_">onMenuShareTimeline</span>(&#123;<br>    <span class="hljs-attr">title</span>: that.<span class="hljs-property">title</span>, <span class="hljs-comment">// 分享标题</span><br>    <span class="hljs-attr">link</span>: that.<span class="hljs-property">link</span>, <span class="hljs-comment">// 分享链接</span><br>    <span class="hljs-attr">imgUrl</span>: that.<span class="hljs-property">icon</span>, <span class="hljs-comment">// 分享图标</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-comment">// 用户确认分享后执行的回调函数 </span><br>    <span class="hljs-comment">//alert(&#x27;success&#x27;)</span><br>    &#125;,<br>    <span class="hljs-attr">cancel</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-comment">// 用户取消分享后执行的回调函数</span><br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-comment">//获取“分享给朋友”按钮点击状态及自定义分享内容接口</span><br>  wx.<span class="hljs-title function_">onMenuShareAppMessage</span>(&#123;<br>    <span class="hljs-attr">title</span>: that.<span class="hljs-property">title</span>, <span class="hljs-comment">// 分享标题</span><br>    <span class="hljs-attr">desc</span>: that.<span class="hljs-property">desc</span>, <span class="hljs-comment">// 分享描述</span><br>    <span class="hljs-attr">link</span>: that.<span class="hljs-property">link</span>, <span class="hljs-comment">// 分享链接</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-comment">// 用户确认分享后执行的回调函数</span><br>    <span class="hljs-comment">//alert(&#x27;share to friend success&#x27;)</span><br>    &#125;,<br>    <span class="hljs-attr">cancel</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-comment">// 用户取消分享后执行的回调函数</span><br>    &#125;<br>  &#125;);<br>&#125;);<br><br>wx.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    common.<span class="hljs-title function_">showPrompt</span>(<span class="hljs-string">&#x27;网络提醒&lt;br&gt;网络连接异常，请稍后重试&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>以上为分享给朋友及分享到朋友所适用的SDK，其余功能参见附录链接。</p><p><code>可能遇到的需求</code><br>点击按钮后触发弹框，然后进行页面跳转.<br>对用户来说，阅读弹框中的文字需要时间（即设置弹框出现到消失的定时器），跳转之前需要时间（即设置弹框消失之后执行跳转这一时间间隔的定时器），所以需要设置两个定时器让它们自己排队解决。注意setTimeout的用法，有关eventloop的内容详见《深入浅出nodejs》60页。</p><p><code>一些逻辑实现</code><br>实现原理来说，获取微信授权需要先跳转再回到当前页面，对于用户来说，跳转越少越好，所以采用缓存的方式，将用户的unionId（代表该用户微信帐号的唯一值）缓存到微信浏览器中。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//设置</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;unionId&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">unionId</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>=<span class="hljs-string">&quot;unionId=&quot;</span>+<span class="hljs-built_in">escape</span>(unionId);<br><span class="hljs-comment">//获取</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;unionId&#x27;</span>);<br><span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;unionId&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>)&#123;<br>  <span class="hljs-keyword">var</span> arr,reg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^| )&quot;</span>+name+<span class="hljs-string">&quot;=([^;]*)(;|$)&quot;</span>);<br>  <span class="hljs-keyword">if</span>(arr=<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">match</span>(reg))<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(arr[<span class="hljs-number">2</span>]);<br>  <span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>根据微信官方说法是4月底微信浏览器升级，之前的bug将修复。当设置缓存的时候可能遇到localstorage无法使用的情况，最好是同时设置localstorage和cookie，但是我实际操作中没有遇到此类问题，localstorage基本通用，所以仅做参考。</p><p><code>关于调试</code><br> 附录中有关于微信调试工具的链接，实测并没有特别好用（主要是没找到代理的设置），建议还是charles走代理调试，ios版微信有页面刷新功能，android版没有，建议用iphone调试。</p><p><code>需要注意的书写方式</code><br>后期会有URL地址变动或者实参的改变，地址或参数相关尽量写成可配置的形式，如在代码段的开头将参数设置为对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> config = &#123;<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;api/app/userinfo&#x27;</span>,<span class="hljs-comment">//获取用户信息</span><br>  <span class="hljs-attr">android</span>:<span class="hljs-string">&#x27;https://www.aaa.com/android&#x27;</span>,<span class="hljs-comment">//android下载地址</span><br>  <span class="hljs-attr">iphone</span>:<span class="hljs-string">&#x27;https://www.aaa.com/iphone&#x27;</span>,<span class="hljs-comment">//iphone下载地址</span><br>  <span class="hljs-attr">imgDefault</span>:<span class="hljs-string">&#x27;http://aaa.com/c.jpg&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>附录</code></p><p><a href="http://mp.weixin.qq.com/wiki/home/">微信开发者文档</a><br><a href="%E5%BE%AE%E4%BF%A1JS-SDK%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3">微信JSSDK说明文档</a><br><a href="http://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html">微信web开发者工具</a><br><a href="http://www.charlesproxy.com/">charles下载地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>微信SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular笔记（1）</title>
    <link href="/2016/04/01/angular%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <url>/2016/04/01/angular%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这两周我参与了一个angular项目的迭代，说一下我的使用心得。<br>架构是大师姐搭建的，比较符合范式要求，讲一下我作为一个angular初学者、公司内部平台维护者的一些学习以及实践经验。</p></blockquote> <span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-app<br><br>-css //预处理器编译后的css文件<br><br>-data //模拟数据<br><br>-js<br><br>-app.js(项目主入口)<br><br>-common.js(路由、过滤)<br><br>-main.js(依赖关系，js入口文件)<br><br>-routes.js(状态切换)<br><br>-less<br><br>-lib(reset之类)<br><br>-index.less<br><br>-lib(js库文件包，在main.js中引入)<br><br>-modules<br><br>-子模块中html、js文件写在一起<br><br>-host.js(开发测试生产环境对应路由，当有新的URL时，需要对应三个环境)<br><br>-index.html(默认首页)<br></code></pre></div></td></tr></table></figure><p><code>下拉列表选项</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;必填，用于表单校验&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-model</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-options</span>=<span class="hljs-string">&quot;item.id as item.name for item in List&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-init</span>=<span class="hljs-string">&quot;设置初始值，慎用，尽量在js中设置&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-change</span>=<span class="hljs-string">&quot;func()&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-disabled</span>=<span class="hljs-string">&quot;满足条件时不可用&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">required</span>&gt;</span>        <br></code></pre></div></td></tr></table></figure><p><code>注意</code></p><p>ng-options :key as value，这样在<code>&lt;option value=&quot;value&quot;&gt;</code>中保存的是value，显示的是key .         </p><p>ng-change挂载在$scope.func ＝ function()上      </p><p><code>输入框选项</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;inputName&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-model</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ng-pattern</span>=<span class="hljs-string">&quot;/此处需要正则表达式，用于检验表单的填写/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-show</span>=<span class="hljs-string">&quot;formName.inputName.$dirty &amp;&amp; formName.inputName.$invalid&quot;</span>&gt;</span><br>  当表单检验不通过时显示提示语，dirty表示表单获得焦点，即表单初始化时提示语不现实，invalid表示满足表单非法状态下显示提示语<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>表格</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">ng-table</span>=<span class="hljs-string">&quot;tableParams&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;item in $data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">data-header</span>=<span class="hljs-string">&quot;&#x27;checkBoxHeader.html&#x27;&quot;</span> &gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">&quot;checkBoxes.items[item.id]&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;&#x27;任务一级分类&#x27;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span> <span class="hljs-attr">bo-bind</span>=<span class="hljs-string">&quot;item.firstCategoryName  | demoLimit:15&quot;</span> <span class="hljs-attr">uib-tooltip</span>=<span class="hljs-string">&quot;&#123;&#123;item.firstCategoryName&#125;&#125;&quot;</span>&gt;</span>  <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>  <span class="hljs-title function_">checkBox</span>(<span class="hljs-params"></span>)&#123;<br>$scope.<span class="hljs-property">checkBoxes</span> = &#123; <span class="hljs-string">&#x27;checked&#x27;</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">items</span>: &#123;&#125; &#125;;<br>$scope.$watch(<span class="hljs-string">&#x27;checkBoxes.checked&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br> angular.<span class="hljs-title function_">forEach</span>(list, <span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br> <span class="hljs-keyword">if</span> (angular.<span class="hljs-title function_">isDefined</span>(item.<span class="hljs-property">id</span>)) &#123;<br> $scope.<span class="hljs-property">checkBoxes</span>.<span class="hljs-property">items</span>[item.<span class="hljs-property">id</span>] = value;<br> &#125;<br> &#125;);<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTableParams</span>(<span class="hljs-params"></span>) &#123;<br>     $scope.<span class="hljs-property">tableParams</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NgTableParams</span>(&#123;<br>           <span class="hljs-attr">count</span>: <span class="hljs-variable constant_">PAGESIZE</span><br>     &#125;, &#123;<br>       <span class="hljs-attr">getData</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>         <span class="hljs-keyword">var</span> pageIndex = params.<span class="hljs-title function_">page</span>();<br>         <span class="hljs-keyword">return</span> httpData.<span class="hljs-title function_">getThemeList</span>(&#123;<br>           <span class="hljs-attr">pageIndex</span>: pageIndex,<br>           <span class="hljs-attr">pageSize</span>: <span class="hljs-variable constant_">PAGESIZE</span>,<br>         &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>           params.<span class="hljs-title function_">total</span>(response.<span class="hljs-property">totalNum</span>);<br>           $scope.<span class="hljs-property">tableCount</span> = response.<span class="hljs-property">totalNum</span>;<br>           list = response.<span class="hljs-property">list</span>;<br>           <span class="hljs-title function_">checkBox</span>();<br>           <span class="hljs-keyword">return</span> response.<span class="hljs-property">list</span>;<br>         &#125;);<br>       &#125;<br>     &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>字符长度过滤</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;demoLimit&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">string,num</span>)&#123;<br>        <span class="hljs-keyword">if</span>(string &amp;&amp; string.<span class="hljs-property">length</span> &gt; num)&#123;<br>           <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,num) + <span class="hljs-string">&quot;...&quot;</span> ;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">return</span> string;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><code>注意</code></p><p>NgTableParams插件获取表单新数据，存入$data中在页面中使用，bindonce插件表示数据同步一次，bo前缀有自己的html语法，区别ng前缀，在加载图片是bo可能会有问题。</p><p><code>数据实时校验</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>数据one<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;entryFee&quot;</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">&quot;Item.dataone&quot;</span>/&gt;</span><br>    &lt;divng-show=&quot;dataoneError==0&quot; &gt;数据1不能超过数据2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>数据two<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;challengeReward&quot;</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">&quot;Item.datatwo&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span> <span class="hljs-attr">ng-show</span>=<span class="hljs-string">&quot;dataoneError==0&quot;</span>&gt;</span>数据1不能超过数据2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$scope.$watch(<span class="hljs-string">&#x27;Item.dataone&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(+$scope.<span class="hljs-property">dataone</span> &lt; +$scope.<span class="hljs-property">datatwo</span>)<br>        $scope.<span class="hljs-property">dataoneError</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        $scope.<span class="hljs-property">dataoneError</span> = <span class="hljs-number">1</span>;<br> &#125;)<br><br>$scope.$watch(<span class="hljs-string">&#x27;Item.datatwo&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">if</span>(+$scope.<span class="hljs-property">dataone</span> &lt; +$scope.<span class="hljs-property">datatwo</span>)<br>        $scope.<span class="hljs-property">dataoneError</span> = <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">else</span><br>        $scope.<span class="hljs-property">dataoneError</span> = <span class="hljs-number">1</span>;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><code>注意</code></p><p>我写了两个<code>watch</code>来同步监视数据变化，若只有一个<code>watch</code>，则可能导致两个数据之一改变另一数据不能检测到，页面中<code>watch</code>过多可能有性能问题，建议有更好的解决方案。</p><p><code>项目启动</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">//app目录下<br>fone s<br></code></pre></div></td></tr></table></figure><p><code>项目打包</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">//index.html打tag<br>//app目录下<br>fis3 release -d ../dist<br>//root目录下<br>git add/commit/push<br></code></pre></div></td></tr></table></figure><p><code>附录一</code></p><p>当页面中出现除了提交表单以外的按钮时，当在input输入框填写文字时键盘触发回车，会导致距离输入框最近的按钮触发，解决方式如下：添加不可用的按钮，则回车触发不可用按钮，完美解决。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ng-disabled</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">&quot;doChooseAdvice()&quot;</span>&gt;</span>选择<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ng-disabled</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>附录二</code><br>需要掌握的资料<br><a href="http://showcase.ngnice.com/#/home/home">angular&amp;bootstrap插件合集</a><br><a href="http://angular-ui.github.io/bootstrap/#/datepicker">angular&amp;bootstrap插件</a><br><a href="http://chensd.com/2015-06/AngularJS-popular-Plugins-and-Directive.html">angular常用插件与指令收集</a><br><a href="https://github.com/angular-ui">angularui</a><br><a href="http://www.cnblogs.com/yjf512/p/3796229.html">javascript时间戳和日期字符串相互转换</a>  </p><p><code>附录三</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Error: [$compile:tplrt] Template for directive &#x27;AAA&#x27; must have exactly one root element. <br></code></pre></div></td></tr></table></figure><p>指令error:这个错误表示指令编译成标签的时候出现问题，可能的解决方式：</p><ul><li>外层包裹一个div</li><li>指令内有标签未闭合，检查代码</li></ul><p><code>附录四</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cannot set property &#x27;visiblecolumncount&#x27; of undefined<br></code></pre></div></td></tr></table></figure><p><img src="/img/ng1-error1.png" alt="angular-error"><br> 当时看到这个问题觉得很奇怪，后来发现是接口没有取到数据的问题，检查接口返回。</p><p><code>友情链接</code><br><a href="http://www.zhouxianbao.cn/">@XB</a>同学改造的<a href="https://www.npmjs.com/package/fone-angular">angular项目目录生成</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ife task1.9</title>
    <link href="/2016/03/26/ife-task1-9-1/"/>
    <url>/2016/03/26/ife-task1-9-1/</url>
    
    <content type="html"><![CDATA[<p><code>任务目的: </code>     </p><blockquote><p>通过实现一个较为复杂的页面，加深对于HTML，CSS的实战能力。       </p></blockquote><blockquote><p>实践代码的复用、优化    </p></blockquote><span id="more"></span> <p><code>任务链接</code><a href="http://http//ife.baidu.com/task/detail?taskId=9">ife_task1_9</a></p><p><img src="/img/task_1_9_2.jpg" alt="task1-9插图"></p><ul><li><p>双栏布局       </p><p>采用了侧栏固定宽度左浮动的方式，整体偏离左侧固定宽度，这样正文宽度100%正好撑满容器。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>这是侧栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;maincontent&quot;</span>&gt;</span><br>     这里是主体<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>   <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">260px</span>;<br>&#125;<br><span class="hljs-selector-tag">nav</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">260px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">1200px</span>;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2a2e3d</span>;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">260px</span>;<br><span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.maincontent</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">1200px</span>;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eeeeed</span>;<br><span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>csssprite</p><p>figure是html5图片的标签，固定占位后设置其背景图片，通过将小图切到一张大图中，然后设置背景图片的位置，完成图片的展示。</p></li></ul><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-class">.backUrl</span>(<span class="hljs-variable">@url</span>:<span class="hljs-string">&quot;/images/csssprite_1_9.png&quot;</span>)&#123;<br><span class="hljs-attribute">background</span>: url(<span class="hljs-string">@url</span>) no-repeat;<br>&#125;<br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-pseudo">:first</span><span class="hljs-selector-tag">-child</span>&#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-selector-class">.backUrl</span>();<br><span class="hljs-attribute">background-position</span>: -<span class="hljs-number">87px</span> -<span class="hljs-number">3px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>css实现列表的选中下拉状态</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav_first&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav_post&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;span&gt;个人报表&lt;/span&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gerenbaobiao&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fold1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;fold1&quot;</span>&gt;</span>个人报表<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foldlist1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.task_nav_foldlist</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[id^=<span class="hljs-string">&#x27;fold&#x27;</span>]</span>&#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125;<br><span class="hljs-selector-class">.task_nav_foldlist</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[id^=<span class="hljs-string">&#x27;fold&#x27;</span>]</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-attr">[id^=<span class="hljs-string">&#x27;foldlist&#x27;</span>]</span>&#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>总结</code></p><p>这次切图我基本精准到像素级，整个页面风格很像bootstrap。整体布局我首先注意到了双栏布局，但是没考虑滚动的时候侧栏和header是否应该固定这个体验，又因为中间多处使用position相对和绝对定位，所以后期修改比较麻烦，这点在以后页面总体布局的时候应该注意。</p><p>由于小图较多，所以我第一次尝试切雪碧图，是个不错的体验。</p><p><a href="https://github.com/ginny315/ife_spring2016_ginny/tree/master/task1-9">github链接</a><br><a href="http://guoningyan.com/ife/task09/index.html">demo链接</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>不是所有应用都适合ajax处理</title>
    <link href="/2016/01/17/%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E9%83%BD%E9%80%82%E5%90%88ajax%E5%A4%84%E7%90%86/"/>
    <url>/2016/01/17/%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E9%83%BD%E9%80%82%E5%90%88ajax%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这几日在学校生产实训，写基于<code>struts2</code>的web站点。<code>struct2</code>属于<code>拦截型</code>框架，会将http请求拦截下来，进行自己对应的过滤处理（包括上传等一些基本请求），若框架本身不能处理的，则回调所写的action处理，因为请求中涉及http协议相关，若对协议不是很明了，可能会处理起来较为麻烦，struts2封装了这些请求，只需要在action中实现相关业务逻辑，同时action给出set和get接口作为数据的请求处理。让使用者只关心核心业务的开发，屏蔽原有技术跟业务无关的技术问题。</p></blockquote><span id="more"></span><p><code>BS基本模型</code><br><img src="/img/cs1.png" alt="BS基本模型">  </p><p>java web中Servlet作用是接受浏览器传给服务端的请求，并将服务端处理完的响应返回给用户的浏览器。   </p><p><code>java web基本处理模型</code>（红色部分为使用ajax的请求处理流向）<br><img src="/img/cs2.png" alt="java web基本处理模型">      </p><p>struts2这是一个非常不错的框架，作为前端，自然是希望后端提供接口（即RESTFulAPI这种），我通过ajax访问接口就可以实现请求。</p><p><code>struts2处理模型</code>（红色部分为使用ajax的请求处理流向)<br><img src="/img/cs3.png" alt="struts2处理模型">          </p><p>但是我在使用过程中发现这种拦截并不适合处理ajax请求，所有的ajax请求都是action处理的，相当于原生java web中servlet处理一样，就失去的框架本身的意义（简化req,res除外）。     </p><p>总结：不能因为学了前端就妄想所有的接口都是RESTFulAPI，有些时候后端渲染会更好，特别是当有了EL标签和JSTL标签之后，不需要用js访问大量DOM节点，这种时候当个小美工就可以啦～</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上海实习</title>
    <link href="/2015/12/26/%E4%B8%8A%E6%B5%B7%E5%AE%9E%E4%B9%A0/"/>
    <url>/2015/12/26/%E4%B8%8A%E6%B5%B7%E5%AE%9E%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>2015年6月到11月，我在1号店实习了5个月，实习的主要任务是练习移动端布局，使用css3属性，促销页面的动画，各种机型的兼容等等。</p><p>印象比较深刻的是新兵训练营，我和另外实习生一起，学习了内部框架FFF的使用，这是一个<code>OO模型</code>的框架，结合了zeptojs，是一个轻量级框架，适合移动端使用，主要是理解面向对象编程的概念，学会将页面拆分成组件，做了demo《疯狂的盒子》，当时XB同学帮了我很多。</p><p>这段学习让我比较深的理解了未来前端编程的发展方向，<code>组件化</code>易于拆分任务，结合时做好拼装就行。同时能可以提高组件的重用性，相同功能的应用可以用已经造好的轮子，避免了重复造轮子的累活儿。所以写代码不能只是能执行就完事儿了，要让代码易于拓展，复用性高。</p><span id="more"></span><p>还有就是命名规范，这在之前写小型项目时基本不考虑这个问题，但是当你的代码要和大家的结合在一起时，很可能就会命名冲突，甚至可能当时看起来没问题，后期出现问题排查时任务量巨大。</p><p>实习时还学到的一点是任务拆分，部门有一面任务墙，大家把要做的事情写在便利贴上，写上任务需要完成的时间，完成后移动位置，直至全部完成。可以看到同事的任务划分的很细，任务执行的每一步都划分成了几个小步，时间会有0.2天这种粒度，深以为这是非常好的完成任务方式，做完每一步都有成就感，同时也不会因为任务大而不知所措。我在这方面比较弱，需要同事的指导才知道怎么划分任务，我也没有养成切任务的习惯，在后期做自己的项目时依然是想到一个功能就添加，前端改不了就自己给后端加接口，这在大项目中是非常不好的，接下去的半年，我都要努力改进。</p><p>实习时做了一个内部创新项目《动效库》，是我和LL同学一起做的，我负责详情页，他负责主页，他选择了使用bootstrap进行布局，并且使用了基于其的一个瀑布流插件，而我是直接切图写逻辑的，后期整合时遇到了不小的麻烦，bootstrap的样式影响了我的原有样式，我不得不继续写样式去覆盖，这点告诉我们前期的技术选型一定要商量好，不然后期会很麻烦。</p><p>后来LL离职了，我完全接手了这个项目，主管提出了中间的一个问题，要我来修复。之前没有看过LL的代码，同时没有使用过这个插件，我花了挺长时间，其中还包括远程音频联系了LL，才理解了代码，修复了这个问题。LL当时的代码有些凌乱，但他确实是个技术不错的人，到现在我们还会常联系讨论技术问题，以后的文章我会继续写。</p><p>后来我又重构了这个项目，进行组件化了，写成了SPA，当然之后又有了新的问题，我之前一直不怎么重视的打开效率问题。下拉采用了懒加载，但是由于加载了大量DOM结构，导致在下拉多次以后页面里有太多的DOM，虽然渲染出来了，点击获取DOM信息再次渲染时会卡很久，这在当时我特意研究了chrome浏览器调试，写了挺多使用感悟，也了解了一些其他瀑布流布局在解决此类问题的方式，由于时间问题，我没有继续深入重构，也是一个小遗憾，有时间肯定会补回来。</p><p>技术篇到此结束了，5个月说长不长，说短也不短，我也学会了很多，有空继续聊。</p><p><a href="http://10.crazyboxginny.sinaapp.com/">动效库</a><br><a href="https://github.com/ginny315/dynamic_new/blob/master/readme.md">关于动效库实现细节及用户体验的思考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工作实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建Github博客</title>
    <link href="/2015/12/24/Hexo%E6%90%AD%E5%BB%BAGithub%E5%8D%9A%E5%AE%A2/"/>
    <url>/2015/12/24/Hexo%E6%90%AD%E5%BB%BAGithub%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>最近迷上了nodejs,hexo是基于nodejs搭建的博客，自然要玩一下～</p><p>整个安装配置过程大概花了一小时，写下来仅供参考。</p><span id="more"></span><ul><li><p>nodejs环境搭建</p><ul><li><p>官网<a href="http://nodejs.org/download/%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E7%82%B9%E5%87%BB%E5%AE%89%E8%A3%85%E5%90%8E%E7%82%B9next%E6%89%A7%E8%A1%8C%E5%88%B0finish%E3%80%82">http://nodejs.org/download/，根据自己的系统选择合适的版本，点击安装后点next执行到finish。</a></p></li><li><p>windows系统默认安装到C:\Program Files\nodejs\，需要添加环境变量Path里面增加nodejs的安装路径</p></li><li><p>控制台：which node 查找node的安装路径</p></li><li><p>Mac默认安装到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</p><ul><li><p>Mac推荐通过brew安装</p><ul><li><p>terminal中执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ruby -e &quot;$(curl -fsSkL https://raw.github.com/Homebrew/homebrew/go/install)&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>若安装过程中提示安装xcode某个工具，按照提示走就行</p></li><li><p>执行brew doctor查看个模块是否正常</p></li></ul></li><li><p>brew install node,自动安装好node和npm</p></li></ul></li><li><p>node -v 查看node安装版本</p></li><li><p>npm -v  查看npm安装版本</p></li><li><p>淘宝镜像安装</p></li></ul><p>​ 低网速下很难通过 npm install fone -g等等来安装npm,解决方法是安装淘宝镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></code></pre></div></td></tr></table></figure><p>从 registry.npm.taobao.org 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPMregistry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.</p><p>$ cnpm install [name]</p></li><li><p>git环境搭建</p><ul><li><a href="http://git-scm.com/download/">下载地址</a>，点next直到安装完成</li><li>windows下配置系统变量Path,加入安装目录</li><li>Mac下若已经安装了xcode,则不用另外下载</li><li>git —version  查看git版本</li></ul></li><li><p>安装Hexo</p><ul><li>官网<a href="https://hexo.io/">https://hexo.io</a></li><li>npm install -g hexo(已经安装淘宝镜像的用cnpm),Mac装全局需要用sudo</li><li>mkdir blog 新建文件夹blog</li><li>cd blog</li><li>hexo init</li><li>npm install 安装依赖</li><li>hexo server</li></ul></li></ul><p>​               [info] Hexo is running at <a href="http://localhost:4000/">http://localhost:4000/</a>. Press Ctrl+C to stop.</p><p>​               这时候在浏览器中访问上面的网址，就能看到一个默认主题的博客啦</p><ul><li><p>主题选择</p><ul><li>自己选择喜欢的，按照文档配置就可以了,<a href="https://www.zhihu.com/question/24422335">知乎推荐的hexo主题</a></li></ul></li><li><p>部署到git</p><ul><li><p>在项目配置文件_config.yml中</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: http://hexo.io/docs/deployment.html</span></span><br>deploy:<br>  type:<br></code></pre></div></td></tr></table></figure></li></ul><p>修改为</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: http://hexo.io/docs/deployment.html</span></span><br>deploy:<br>  type: git<br>  repository: git@github.com:yourname/yourname.github.io.git<br>  branch: master<br></code></pre></div></td></tr></table></figure><p>yourname是你的git账号名字，需要在github网站新建一个yourname.github.io的仓库，则默认为git托管的静态资源站点<br>若提示Deployer not found: git，执行npm install hexo-deployer-git –save</p></li><li><p>发布</p><ul><li><p>hexo  new “New Post” 创建新post，在source&#x2F;_posts目录下可以看到新建的markdown文件,或者直接将编辑好的文件放上面的目录下</p></li><li><p>hexo generate将markdown文件生成静态网页</p></li><li><p>hexo deploy发布</p></li><li><p>稍等片刻，访问yourname.github.io就可以看到hexo搭建在github的博客啦～～</p></li></ul><p>​</p><p>​</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs笔记（1）</title>
    <link href="/2015/12/24/nodejs/"/>
    <url>/2015/12/24/nodejs/</url>
    
    <content type="html"><![CDATA[<ul><li>核心模块和node_modules文件夹下各个模块直接require(“name”);其余需要添加require(“.&#x2F;name”);</li><li>path.join(__dirname,,”routes”,”messages”)可以生成有效的斜杠语法路径，根据系统不同分别会生成斜杠或者反斜杠</li><li>最好的调试console.log()，因为不会中断执行过程；暂停执行过程，观察异步代码中调用栈里的相关信息用debugger,  node debug filename</li><li>nodejs最大的好处：不需要编译代码，因为它被加载到内存中，由平台来解释执行</li><li>express提供了类似于MVC的架构（视图、路由、模型）</li><li>TDD测试驱动开发：定义一个单元测试、执行这个单元测试、验证这个测试是否通过</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
